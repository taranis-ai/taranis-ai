name: E2E Tests

on:
  workflow_run:
    workflows: ["test and lint"]
    types: [completed]

jobs:
  e2e_tests:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request'
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Grab PR number & SHA
        id: pr_info
        run: |
          PR_NUM=${{ github.event.workflow_run.pull_requests[0].number }}
          PR_SHA=${{ github.event.workflow_run.head_commit.id }}
          echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
          echo "pr_sha=$PR_SHA"      >> $GITHUB_OUTPUT

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.pr_sha }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set PLAYWRIGHT_BROWSERS_PATH & Trace Artifact Name
        run: |
          echo "PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/ms-playwright" >> $GITHUB_ENV
          TRACE="playwright-traces-${{ steps.pr_info.outputs.pr_number }}"
          echo "TRACES_ARTIFACT_NAME=${TRACE//\//-}" >> $GITHUB_ENV

      - name: Check Playwright version consistency
        run: |
          set -euo pipefail
          FRONT=$(uv export --frozen --no-hashes --all-extras --directory src/frontend \
                  | grep '^playwright==' | cut -d= -f3)
          CORE=$(uv export --frozen --no-hashes --all-extras --directory src/core \
                  | grep '^playwright==' | cut -d= -f3)
          echo "Frontend playwright version: $FRONT"
          echo "Core     playwright version: $CORE"
          if [ "$FRONT" != "$CORE" ]; then
            echo "::error ::Playwright version mismatch!"
            exit 1
          fi

      - name: Set up Python & install core
        working-directory: src/core
        run: |
          uv python install
          uv sync --all-extras

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: src/core
        run: uv run playwright install --with-deps chromium

      - name: Download built frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: built-frontend-${{ steps.pr_info.outputs.pr_number }}
          path: src/gui/

      - name: Extract frontend artifact
        working-directory: src/gui
        run: tar xf built-frontend-${{ steps.pr_info.outputs.pr_number }}.tar.gz

      - name: Run core E2E tests
        working-directory: src/core
        run: uv run pytest --e2e-ci

      - name: Install frontend dependencies
        working-directory: src/frontend
        run: uv sync --all-extras

      - name: Build Tailwind CSS
        working-directory: src/frontend
        run: ./build_tailwindcss.sh

      - name: Run frontend E2E tests
        working-directory: src/frontend
        run: uv run pytest --e2e-ci

      - name: Upload traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TRACES_ARTIFACT_NAME }}
          path: src/**/taranis_ai_*_trace.zip
