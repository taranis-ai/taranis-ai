name: Test Production Compose

on:
  workflow_run:
    workflows: ["E2E Tests"]
    types: [completed]

jobs:
  precheck:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_paths.outputs.trigger }}
      is_approved: ${{ steps.pr_approval.outputs.approved }}
      pr_number: ${{ steps.get_pr.outputs.number }}
      pr_sha: ${{ steps.get_pr.outputs.sha }}

    steps:
      - name: Get PR info
        id: get_pr
        run: |
          PR_JSON=$(echo '${{ toJson(github.event.workflow_run.pull_requests) }}')
          PR_NUMBER=$(echo "$PR_JSON" | jq -r '.[0].number')
          PR_SHA=$(echo "$PR_JSON" | jq -r '.[0].head.sha')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "sha=$PR_SHA" >> $GITHUB_OUTPUT

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_pr.outputs.sha }}
          fetch-depth: 0

      - name: Get changed files
        id: check_paths
        run: |
          CHANGED=$(git diff --name-only origin/main...HEAD | tr '\n' ',' | sed 's/,$//')
          echo "CHANGED_FILES=$CHANGED" >> $GITHUB_ENV
          if echo "$CHANGED" | grep -qE '^(src/core/core/|src/worker/worker/|docker/)'; then
            echo "trigger=true" >> $GITHUB_OUTPUT
          else
            echo "trigger=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if PR is approved by a human
        id: pr_approval
        run: |
          PR_NUMBER=${{ steps.get_pr.outputs.number }}
          echo "Checking approval status for PR #$PR_NUMBER"

          APPROVED_HUMAN=$(gh pr view "$PR_NUMBER" --json reviews --jq '
            .reviews
            | map(select(.state == "APPROVED"))
            | map(select(.author.login != "sourcery-ai[bot]"))
            | unique_by(.author.login)
            | length
          ')
          if [[ "$APPROVED_HUMAN" -gt 0 ]]; then
            echo "approved=true" >> $GITHUB_OUTPUT
          else
            echo "approved=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  production_compose_test:
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true' && needs.precheck.outputs.is_approved == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.precheck.outputs.pr_sha }}
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Checkout latest tag
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          ref: ${{ steps.get_latest_tag.outputs.tag }}

      - name: Run docker compose for tagged version
        working-directory: docker
        run: |
          cp env.sample .env
          docker compose up --wait core database frontend gui sse rabbitmq collector workers
          docker ps -a
          docker compose down

      - name: Checkout PR commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.precheck.outputs.pr_sha }}
          fetch-depth: 1

      - name: Build Docker images from PR code
        run: |
          chmod +x docker/build_containers.sh
          ./docker/build_containers.sh

      - name: Run docker compose for latest version
        working-directory: docker
        run: |
          cp env.sample .env
          docker volume ls
          docker compose up --wait core database frontend gui sse rabbitmq collector workers
          docker ps -a
          docker compose down
