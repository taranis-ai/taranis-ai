name: test and lint

on:
  workflow_dispatch:
  pull_request:

env:
  UV_NO_SYNC: true
  UV_FROZEN: true

jobs:
  test_core:
    name: pytest core
    defaults:
      run:
        working-directory: src/core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: uv sync --all-extras

      - name: Lint with ruff
        run: uv run ruff check --output-format=github .

      - name: Run tests and capture output
        id: run-tests
        run: |
          set -o pipefail
          uv run pytest | tee pytest_output.txt
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **✅ Passed:** $(grep -oP '\d+(?= passed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **❌ Failed:** $(grep -oP '\d+(?= failed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **⚠️ Skipped:** $(grep -oP '\d+(?= skipped)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **🚨 Errors:** $(grep -oP '\d+(?= error)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY

  test_frontend:
    name: pytest frontend
    defaults:
      run:
        working-directory: src/frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: uv sync --all-extras

      - name: Lint with ruff
        run: uv run ruff check --output-format=github .

      - name: Run tests and capture output
        id: run-tests
        run: |
          set -o pipefail
          uv run pytest | tee pytest_output.txt
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **✅ Passed:** $(grep -oP '\d+(?= passed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **❌ Failed:** $(grep -oP '\d+(?= failed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **⚠️ Skipped:** $(grep -oP '\d+(?= skipped)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **🚨 Errors:** $(grep -oP '\d+(?= error)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY

  test_gui:
    name: test gui
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/gui
    outputs:
      gui_artifact_name: ${{ steps.set_gui_artifact_name.outputs.gui_artifact_name }}

    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: src/gui/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Lint with eslint
        run: pnpm run lint_and_format

      - name: Build frontend
        run: pnpm run build

      - name: Preperae GUI artifact
        id: set_gui_artifact_name
        run: |
          GUI_ARTIFACT_NAME="built-frontend-${{ github.event.pull_request.number || github.run_number }}"
          GUI_ARTIFACT_NAME=${GUI_ARTIFACT_NAME//\//-}
          echo "GUI_ARTIFACT_NAME=${GUI_ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "gui_artifact_name=${GUI_ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          tar -czf ${{ runner.temp }}/${GUI_ARTIFACT_NAME}.tar.gz dist/

      - name: Upload built frontend
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GUI_ARTIFACT_NAME }}
          path: ${{ runner.temp }}/${{ env.GUI_ARTIFACT_NAME }}.tar.gz

  test_worker:
    name: pytest worker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/worker
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install worker
        run: uv sync --all-extras

      - name: Install playwright dependencies
        run: uv run playwright install --with-deps chromium

      - name: Lint with ruff
        run: uv run ruff check --output-format=github .

      - name: Run tests and capture output
        id: run-tests
        run: |
          set -o pipefail
          uv run pytest | tee pytest_output.txt
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **✅ Passed:** $(grep -oP '\d+(?= passed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **❌ Failed:** $(grep -oP '\d+(?= failed)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **⚠️ Skipped:** $(grep -oP '\d+(?= skipped)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **🚨 Errors:** $(grep -oP '\d+(?= error)' pytest_output.txt || echo 0)" >> $GITHUB_STEP_SUMMARY
