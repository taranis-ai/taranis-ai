name: build core

on:
  push:
    paths:
    - 'src/core/**'
    - 'docker/Containerfile.core'
    - '.github/workflows/build_core.yaml'
    branches:
    - master

permissions:
  packages: write
  contents: write

jobs:
  test:
    name: pytest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          prune-cache: false

      - name: Set up Python
        working-directory: src/core
        run: uv python install

      - name: Install dependencies
        working-directory: src/core
        run: uv sync --all-extras --dev

      - name: unit tests
        working-directory: src/core
        run: uv run pytest

      - name: Install Playwright dependencies
        working-directory: src/core
        run: uv run playwright install --with-deps chromium

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: |
            src/gui/pnpm-lock.yaml

      - name: Set Artifact Name
        run: echo "TRACES_ARTIFACT_NAME=playwright-traces-build-core" >> ${GITHUB_ENV}

      - name: e2e tests
        id: e2e_tests
        working-directory: src/core
        run: uv run pytest --e2e-ci

      - name: Upload a e2e-test trace
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() && steps.e2e_tests.outcome == 'failure' }}
        with:
          retention-days: 7
          overwrite: true
          name: ${{ env.TRACES_ARTIFACT_NAME }}
          path: src/core/trace.zip

  build_wheel:
    name: build wheel
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          prune-cache: false

      - name: Set up Python
        working-directory: src/core
        run: uv python install

      - name: build
        working-directory: src/core
        run: uv build

      - name: Upload wheel to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taranis_core
          overwrite: true
          path: |
            src/core/dist/taranis_core-*.whl
            src/core/dist/taranis_core-*.tar.gz

  build_container:
    name: build container
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set build env
        run: |
          echo "GHCR_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >>${GITHUB_ENV}
          echo "GIT_INFO=$(./docker/git_info.sh)" >>${GITHUB_ENV}
      - name: Build and push core
        uses: docker/build-push-action@v5
        with:
          file: docker/Containerfile.core
          push: true
          tags: |
            ghcr.io/${{ env.GHCR_OWNER }}/taranis-core:latest
            ghcr.io/${{ env.GHCR_OWNER }}/taranis-core:${{ github.ref_name }}
          build-args: |
            git_info=${{ env.GIT_INFO }}
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=true
          cache-from: type=registry,ref=ghcr.io/${{ env.GHCR_OWNER }}/taranis-core-cache:latest
          cache-to: type=registry,ref=ghcr.io/${{ env.GHCR_OWNER }}/taranis-core-cache:latest,mode=max
