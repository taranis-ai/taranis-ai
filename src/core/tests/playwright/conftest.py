import pytest


@pytest.fixture(scope="function")
def fake_source(app, request):
    with app.app_context():
        from core.model.osint_source import OSINTSource

        source_data = {
            "id": "99",
            "description": "This is a test source",
            "name": "Test Source",
            "parameters": [
                {"FEED_URL": "https://url/feed.xml"},
            ],
            "type": "rss_collector",
        }
        source_id = source_data["id"]

        if not OSINTSource.get(source_id):
            OSINTSource.add(source_data)

        def teardown():
            with app.app_context():
                OSINTSource.delete(source_id)

        request.addfinalizer(teardown)

        yield source_id


@pytest.fixture
def news_items_data(app, fake_source):
    with app.app_context():
        from core.model.news_item import NewsItemData

        news_items_data_list = [
            {
                "id": "f9cf0d62-ac04-4083-9647-1e9da682d364",
                "hash": "920a3d6fdece9cb50db96abc16ec4c07d7069603e1bef034099228353e27d616",
                "title": "Micropatches Released For Microsoft WordPad Information Disclosure (CVE-2023-36563)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2023/11/micropatches-released-for-microsoft.html",
                "content": "October 2023 Windows Updates brought a patch for CVE-2023-36563, an \"Information Disclosure\" vulnerability in WordPad that was found by Microsoft Threat Intelligence as being exploited in the wild. A better name for this vulnerability would be \"Coerced authentication\" or \"Forced authentication\", as it falls in the same class of vulnerabilities as various similar issues that we've patched before.\nIn any case, the vulnerability allows an attacker to create a Rich Text Format (RTF) document which, when opened by the victim in WordPad*, sends user's NTLM hash to attacker's server - where the attacker can receive it and send it to some other NTLM-enabled service in victim's network to impersonate the victim.\n(* WordPad is the default application for RTF files when Office is not installed.)\nWhile WordPad warns the user that the document contains potentially harmful remote content, and the user can choose to block such content, WordPad sends out user's NTLM hash before showing this warning - which is a bit out of order, so to speak.\nThe Vulnerability and the Official Patch\nTwo weeks later, security researcher Dillon Franke publish their reverse engineering analysis of this vulnerability. In this article, Dillon describes reverse engineering Microsoft's patch and tracing back to the vulnerability. They not only discovered what the issue was but also that Microsoft created new Windows API functions to fix it: the underlying problem turned out to be systemic, namely that simply initializing an OLE object could result in Windows trying to authenticate to a remote server without any way for the initializing application - or its user - to decide whether they were okay with that. Microsoft therefore created new functions that included this functionality using \"callback functions\", and fixed WordPad by using these new functions instead of the old ones.\nOur Micropatch\nAs for our patching this issue, we really didn't want to implement new functions in ole32.dll because our thing is, you know, MICROpatching.\nInstead, we decided to do something different, something that we thing WordPad should have been doing for years now: we implemented Mark-of-the-Web checking in WordPad.\nMark-of-the-Web (MotW) is a flag that gets set by all major web browsers and mail clients on Windows on all files that originate from the Internet, and allows applications opening such files to alert the user about opening a potentially harmful document. Most major document-handling applications on Windows check the MotW and do something about it, but WordPad never got this feature.\nWe decided that implementing a MotW check in WordPad would not only provide effectively identical level of protection against the issue at hand as Microsoft's patch, but would also show users a security alert for any other malicious document originating from the Internet. We consider this a good thing.\nLet's see our micropatch in action. On the left side of the screen is the victim's computer, vulnerable to CVE-2023-36563, where the user is about to open attacker's RTF document. On the right side is the attacker's server running a tool that is waiting to collect user's NTLM hash. Without 0patch, opening the RTF document results in attacker's server receiving user's NTLM hash even before WordPad shows the security warning. With 0patch, a new \"Mark-of-the-Web\" warning is shown to the user upon opening the document, and if the user decides not to proceed with opening the document, no NTLM hash is sent to attacker's server.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with years 1, 2 or 3 of ESU)\n- Windows Server 2008 R2 (without ESU, with years 1, 2 or 3 of ESU)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Dillon Franke for sharing their analysis, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "762fa807-dd96-40d9-a834-a84146ab6a11",
                "hash": "2d045ca7521515be6c588ce5238a3cebfc5342a8b83280d27700939fb658695b",
                "title": "Micropatches Released For Microsoft Office Security Feature Bypass (CVE-2023-33150) - Plus a Small 0day",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2023/10/micropatches-released-for-microsoft.html",
                "content": "In July 2023, Microsoft released a patch for CVE-2023-33150, a vulnerability in Microsoft Office that allowed an attacker to create a malicious Word document which would not open in Protected View even though it had the Mark-of-the-Web (\"MotW\") set.\nThe first public detail about this vulnerability came from security researcher Eduardo B. Prado, noting that adding a non-breaking space character to the end of a Word document's extension prevents Word from opening the document in Protected View.\nSubsequently, Will Dormann published his own research. Will noticed that in the process of opening a file with a non-breaking space in the extension, Word at some point - after normalizing the file path - tried to find the Mark-of-the-Web in a file without the non-breaking space, and failed because no such file existed. Using a flawed logic \"no file, no Mark-of-the-Web\", Word then decided that it was safe to open the document without Protected View.\nTo illustrate the issue, suppose a downloaded malicious file with Mark-of-the-Web is named PoC.doc, whereby  denotes a non-breaking space. (One can create such file manually by editing the name of the file, placing the cursor at the end of the file name, holding down Alt and typing 255 on the numeric keypad.) Opening such file in Word would lead to Word normalizing the file name at some point (which removes the non-breaking space), and trying to read Mark-of-the-Web from PoC.doc. Since this file does not exist, Word would assume there was no Mark-of-the-Web, even though this mark existed on the malicious file. Believing there was no Mark-of-the-Web, Word would open the file without Protected View.\nMicrosoft's patch fixed this flawed logic: fully updated Word now still tries to open the file without the trailing non-breaking space, still fails (of course, such file is not there), but then defaults to \"Mark-of-the-Web is present\" and opens the document in Protected View.\nThe following video demonstrates the vulnerability on fully updated Office 2013, and shows that 0patch removes it. A PoC.doc file on the desktop has the Mark-of-the-Web and also has a non-breaking space appended to the end of the file name. Opening such file doesn't automatically launch Word, because this exact file extension is not associated with any application, but Windows very friendly offer Microsoft Word as the most likely candidate for opening the file. Word then opens this file without Protected View. With 0patch enabled, opening the same file results in the file being opened in Protected View.\nSince users of Office 2010 and 2013 didn't receive Microsoft's patch for this issue, we created our own micropatches for these versions that fix CVE-2023-33150. All PRO and Enterprise users had these patches automatically applied without even having to relaunch Word.\nAnd now, the 0day....\nWhile working on the above vulnerability and its patch, our researchers noticed something strange in the patched version of Word. While Microsoft's patch for CVE-2023-33150 changed the flawed logic of \"no file, no Mark-of-the-Web\" to a more secure \"no file, yes Mark-of-the-Web\", the underlying assumption in both cases was that there was no file.\nIn our tests, while frequently moving, copying and renaming files, fully patched Word sometimes behaved strangely, seemingly randomly not opening the file in Protected View when it should have. It turned out there is another flaw in the other half of the above logic: the half where a file without the non-breaking space at the end happens to exist.\nWhat happens in that case? Well, Word tries to read the Mark-of-the-Web from it and uses it for deciding whether to open the file in Protected View or not.\nSuppose we have, like before, a malicious file with the Mark-of-the-Web named PoC.doc: a fully patched Word correctly opens it in Protected View. Suppose we then place another file named PoC.doc next to it without the Mark-of-the-Web and open the first file with Word: Word checks PoC.doc for Mark-of-the-Web and, not finding it, opens the malicious file without Protected View.\nIs this a security issue? Let's discuss exploitability.\nCould the attacker who tricked the user into opening a malicious PoC.doc (a file with Mark-of-the-Web) also plant PoC.doc (without Mark-of-the-Web) next to it to make Word open the former without Protected View? If they could, they might as well just plant PoC.doc and have the user open it for the same effect without having to exploit anything.\nAlternatively, could the attacker plant a malicious MeetingMinutes.doc (a file with Mark-of-the-Web) next to a previously existing, legitimate MeetingMinutes.doc (without Mark-of-the-Web) on user's computer? Potentially yes: our best attack scenario is for the user to have downloaded a Word document from an intranet web server, which would end up in the Downloads folder without Mark-of-the-Web. The attacker would then trick the user to open MeetingMinutes.doc from their own web server on the Internet, which would result in Word opening this file from the Downloads folder, but would read the Mark-of-the-Web from the legitimate MeetingMinutes.doc, and decide to open the malicious file without Protected View.\nThis is arguably a pretty far-fetched scenario, and perhaps someone else will think of a better one. With this in mind we reported the issue to Microsoft and expect it to be fixed soon, but did not wait with publication due to very limited exploitability. We did, however, write a micropatch for all supported Word versions (Word 2016, 2019, 2021 and 365) and made it freely available until Microsoft has provided their official fix. Our CVE-2023-33150 patches for Word 2010 and 2013 also fix this vulnerability on these Office versions.The following video demonstrates the vulnerability and how our patch removes it.\nMicropatch Availability\nMicropatches were written for the following versions of Microsoft Office with all available updates installed:\n- Office 2010 (PRO or Enterprise license required)\n- Office 2013 (PRO or Enterprise license required)\n- Office 2016 (free until Microsoft provides an official patch)\n- Office 2019 (free until Microsoft provides an official patch)\n- Office 2021 (free until Microsoft provides an official patch)\n- Office 365 (free until Microsoft provides an official patch)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Eduardo B. Prado and Will Dormann for sharing their knowledge, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "c4341410-5fb8-4a74-b187-e99f668855e5",
                "hash": "591cbd6d2708fc444f4fe4a1b74b11c5ac6dd3819855190fcf6c53d7de1d582a",
                "title": "We Patched CVE-2023-28244 Before It Was Cool",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/we-patched-cve-2023-28244-before-anyone.html",
                "link": "https://blog.0patch.com/2023/11/we-patched-cve-2023-28244-before-anyone.html",
                "content": "How Our Patch For CVE-2022-33647 Fixed CVE-2023-28244 Five Months In Advance\nBy Blaz Satler of 0patch Team\nThe Initial Vulnerability - CVE-2022-33647\nIn September 2022, Microsoft released patches for CVE-2022-33647, a Kerberos vulnerability that allows a MITM (Man-In-The-Middle) attacker to hijack a user's Kerberos ticket and achieve domain privilege escalation. James Forshaw of Google Project Zero was attributed with the discovery of this issue, and shortly after the issue was fixed also published a writeup on the official Project Zero bug tracking page. James also forked a branch of GhostPacks Rubeus tool and added a sample POC (Proof-of-Concept) code that demonstrated this issue in action and allowed users to check if their KDC (Key Distribution Center) was affected.\nTesting revealed that this issue affected all Kerberos versions that have not configured any restrictions for the use of old cryptographic algorithms, specifically RC4-MD4. This algorithm is particularly dangerous as it contains multiple known vulnerabilities, such as using only the first 8 key bytes for encryption and only 40 bits of randomness in session keys. Such security deficiencies could make you wonder why the algorithm is even allowed to be used in Kerberos. Nevertheless, Kerberos allowed its use by default and also didn't seem to mind being downgraded from a stronger protocol to RC4-MD4 mid-session, which was why the POC worked.\nMicrosoft's Patch\nWe analyzed Microsoft's patches for CVE-2022-33647 and the exploit's execution flow. All signs seemed to point to a patch in kdcsvc.dll, specifically in the KerbInitPreferredCryptList function. This function executes when the KDC service starts which is with the start of lsass.exe. Its job is to initialize the PrefferedCryptList (yes, we know, it's a typo in the code too) variable and two other lists with cryptographic algorithms that the KDC will prefer. Microsoft patched this by not including RC4-MD4 and RC4_HMAC_OLD to these lists. At the time this fix seemed sufficient with the only apparent flaw being that it would only come into effect after the system that applied the patch had been restarted.\nOur Micropatch\nOur own patch, in contrast, needed to be able to protect the system from the moment that the user decided to apply it, so we needed to find a better way of blocking these protocols. During the analysis, we stumbled upon the KerbGetEncTypeBitmask function which supplies bit masks of all supported encryption algorithms to other parts of the code. It has the ability to refuse unknown encryption types, so we decided to take a closer look. Upon further investigation, we found that it was invoked on every request to the KDC, so it made for a perfect candidate for patching this exploit in real time (without a reboot). Our patch was injected at the start of this function and checked if the passed cryptographic algorithm was one of the two that Microsoft had blocked; if it was, we simply executed the \"return 0\" command which returns KDC_ERR_ETYPE_NOTSUPP (\"type not supported\"). This had the effect of completely blocking any use of RC4_MD4 and RC4_HMAC_OLD, and our patches were released in October 2022.\nThe New Vulnerability - CVE-2023-28244\n6 months later, Microsoft released a fix for another similar vulnerability CVE-2023-28244, acknowledging John Askew with Terrapin Labs as the discoverer. Subsequently John also published a POC on GitHub which seemed eerily similar to James' POC for CVE-2022-33647. Our tests revealed that this new exploit attacked the same RC4-MD4 encryption algorithm but with a slight modification to the AS-REQ packet. This new exploit included a timestamp encrypted with the user's password inside the AS-REQ, which changed the execution flow in kdcsvc.dll.\nThis modification caused the exploit to bypass Microsoft's patch that had caught its predecessor. Microsoft's patch only changed how a few crypt lists were initialized, but left some relevant global variables like KdcGlobalSupportedEnctypes unchanged. Although there were other checks in place for unsupported encryption types that were executed later, none of them used the patched PrefferedCryptList variable that was stripped of RC4-MD4 and RC4_HMAC_OLD. This again resulted in RC4-MD4 being used for encrypting the session and tickets.\nA Pretty Decent Patch\nThe micropatch we had released for CVE-2022-33647, on the other hand, proved to be remarkably robust, effectively neutralizing the new, modified exploit. It was particularly gratifying to find that Microsoft's fix for the new vulnerability targeted the same function as our original patch (KerbGetEncTypeBitmask), and closely resembled our own patch for this vulnerability: it removed the validation for RC4-MD4 and RC4_HMAC_OLD encryption algorithms within the KerbGetEncTypeBitmask function, returning a '0' as the function's result when these algorithms were passed to it. This behavior is logically equivalent to our patch.\nEffectively, our patch for CVE-2022-33647 fixed CVE-2023-28244 entire 157 days before it was patched by Microsoft.\nLooking for a way to keep using Windows Server 2012 securely, and don't want to purchase expensive Extended Security Updates? Want to protect your legacy Windows 7, Server 2008 R2 machines and Microsoft Office installations with actual security patches that don't even need a computer restart and can get applied or un-applied in seconds? Not objecting to having occasional vulnerabilities fixed before those running still-supported Windows versions? 0patch has your back!\nLearn more about 0patch on our web site, in our Help Center, or contact us at sales@0patch.com for a free trial or demo.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "eef86e95-d1de-48ea-b815-8db912699a18",
                "hash": "010de3f7f9eb52e8cea613fa6c86b7483d64ba99f220b0e38e1311228173a27a",
                "title": "Micropatches Released For Windows Task Scheduler Elevation of Privilege (CVE-2023-21541)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-windows-task.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-windows-task.html",
                "content": "January 2023 Windows Updates brought a fix for CVE-2023-21541, a local privilege elevation in Task Scheduler. The vulnerability was reported to Microsoft by Ben Lincoln of Bishop Fox.\nIn April, Ben published a detailed analysis of this issue, which allowed us to reproduce the issue and create a micropatch for Windows computers that haven't received an official fix from Microsoft.\nThe\nvulnerability is easy to understand: if a scheduled task contains an environment variable in its executable path, expansion of this variable may result in double quotes around the path being lost, which could then lead to the \"unquoted path\" vulnerability.\nOn the other hand, the issue is not so easy to exploit, assuming that the local attacker does not have administrative privileges (why would they need a local privilege elevation vulnerability if they did?). The first condition is that a scheduled task must already exist on the system whose path to the executable contains an environment variable, and the second condition is that the attacker is able to create a malicious executable called program.exe in the root of C: drive. The latter is, by default, only allowed for administrators and system, so the computer would have to be in some custom configuration.\nNevertheless, we decided to patch this, since at least a couple of our users may have both these conditions fulfilled. While\nstill-supported Windows systems have already received the official\nvendor fix for this vulnerability, there are Windows systems out there\nthat aren't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatches for this\nvulnerability, which are available through the 0patch service.\nOur patch is functionally similar to Microsoft's, but in our case applying the patch doesn't require a restart of the Task Scheduler service (while Microsoft's does).\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nThis micropatch has already been distributed to, and applied on, all online 0patch Agents in PRO or Enterprise accounts (unless Enterprise group settings prevent that).\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Ben Lincoln of Bishop Fox for sharing their analysis, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "ae173446-35f4-4ed9-9b22-46735c999f62",
                "hash": "53faa637c58d5469dc3537ce632e5283eec4ffdbe2eeacc155fb3bf870ee2424",
                "title": "0patch Security-Adopts Windows 10 v20H2 to Keep it Running Securely",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/0patch-security-adopts-windows-10-v20h2.html",
                "link": "https://blog.0patch.com/2023/06/0patch-security-adopts-windows-10-v20h2.html",
                "content": "Last month brought the last security updates for Windows 10 version 20H2. What if your organization is still using it and doesn't want to - or can't - upgrade it yet?\nDon't worry, we have previously security-adopted Windows 10 v1803 and v1809, Windows 10 v2004 and v1909, and Windows 10 v21H1.\nNow we're security-adopting version 20H2.If you're running Windows 10 v20H2 in your organization, all you need to do is install 0patch Agent on these computers and register it to an account with PRO or Enterprise subscription, and you'll start receiving critical security patches as soon as we issue them.\nThese micropatches will be included in 0patch PRO and Enterprise licenses along with all other micropatches we're issuing - which means that users protecting their Windows 10 v20H2 with 0patch will also receive our micropatches for \"0day\" vulnerabilities in various products.\nIn order to have our micropatches applied,\nWindows 10 v20H2 will have to have May 2023 Windows Updates (the\nlast official updates for this version) installed.\nWe welcome all interested organizations to contact sales@0patch.com for information about pricing, deployment, or setting up a trial.\nP.S.:\nWe're getting close to Windows Server 2012 end of official support by\nMicrosoft in October 2023. You guessed it, we're going to security-adopt\nthis server as well, in case you're already getting nervous about that.\nThis is a good time for you to start a free 0patch trial, so send an\nemail to sales@0patch.com.\nTo learn more about 0patch, please visit our Help Center.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a8ede230-7533-475c-8a30-6f2cbd752c45",
                "hash": "fd5d593dd1e58b63359395a3e2f998cd02f0b3cdf3989597fc876eaa8074d3ad",
                "title": "New 0patch Central, New Security Features",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/new-0patch-central-new-free-security.html",
                "link": "https://blog.0patch.com/2023/06/new-0patch-central-new-free-security.html",
                "content": 'Dear 0patch friends,\nWe\'re happy to share with you that four new highly asked-for features have been added to 0patch Central:\nMulti-factor Authentication\nYou can now protect your 0patch account with multi-factor authentication (MFA). Use any authenticator app to configure MFA in your user profile and store recovery codes in a safe place in case you lose access to the app. This feature is available in Free, Pro, and Enterprise accounts.\nAuthentication Options\nSelect which authentication methods can be used for logging in to 0patch Central; choose between "Email and Password" and "Single sign-on", and specify whether multi-factor authentication ("MFA") is required for all users in the account. Find this feature under Account -> Security in Enterprise accounts.\nPassword Policy\nSet the password policy for users in your account; users will be forced to change their password upon next login if needed. Find this feature under Account -> Security in Enterprise accounts..\nIP Address Restrictions\nSpecify a set of IP addresses or subnets from which your 0patch Central account can be accessed. This setting does not affect 0patch Agents - they can always sync from anywhere. Find this feature under Account -> Security in Enterprise accounts..\nUpcoming Security-Adoption of Windows Server 2012\nIn the spirit of supporting legacy Windows versions and Microsoft products, we\'re happy to announce an upcoming adoption of Windows Server 2012, which goes out of official support in October 2023. If you\'re using Windows Server 2012 and would like to keep doing so securely, contact us at sales@0patch.com.\nAre your friends or peers operating Windows systems? Do them a favor and tell them about 0patch.\nThank you!\nYour 0patch Team\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "4b9a3a75-9dcb-49c6-a30e-227f3c668e94",
                "hash": "ccb5175dd65dbaab79ff6ca35d7c36a31498fd86838e6af66a06c953bf5f0671",
                "title": "Micropatches Released For Windows Search Remote Code Execution (CVE-2023-36884)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/09/micropatches-released-for-windows.html",
                "link": "https://blog.0patch.com/2023/09/micropatches-released-for-windows.html",
                "content": "Alongside July 2023 Windows Updates, Microsoft revealed the existence of a 0day that was detected in the wild and assigned it CVE-2023-36884. Without issuing a patch, they titled their original advisory \"Office and Windows HTML RCE vulnerability\" as exploitation was performed using malicious Word documents, and provided workarounds that could block exploitation.\nVery little information was publicly available and exploit samples that were referenced by those who claimed to be in the know seemed convoluted, comprising numerous exploits of old known vulnerabilities. The main source of useful information was security researcher Will Dormann who invested a great deal of effort in publicly dissecting many of these samples and reviewing numerous sources to meticulously separate the wheat from the chaff (see his super long Twitter thread).\nIn absence of sufficient information on the vulnerability itself, we initially decided to issue a patch that implemented one of the most effective workarounds recommended by Microsoft - the FEATURE_BLOCK_CROSS_PROTOCOL_FILE_NAVIGATION mitigation for all Office executables. This patch - free for everyone as the issue was still an unpatched 0day - enabled said workaround on all 0patch customers' computers so they didn't have to do that manually (or even know about this 0day).\nThe Official Patch\nIn August, Microsoft finally provided a patch for CVE-2023-36884, and updated their advisory to reveal that the issue lied in Microsoft Search and that \"An attacker can plant a malicious file evading Mark of the Web (MOTW) defenses which can result in code execution on the victim system.\"\nThis, combined with Will's analysis of the changed behavior in Windows ZIP file extraction (mostly the latter, really), led us to conclusion that Microsoft's patch for CVE-2023-36884 was focused on randomizing the temporary path where files from a ZIP archive are extracted. Before the August update, a file.txt file opened directly from an archive.zip ZIP file would be extracted to a location like:\nC:\\Users\\username\\AppData\\Local\\Temp\\Temp1_archive.zip\\file.txt\nFor a local exploit script running on user's computer this is a predictable location, and if extraction process was terminated by exploit code at the right time, Windows would not put the Mark of the Web (MotW) on the file even if the ZIP file came from the Internet and should not be trusted. The absence of this mark on the extracted file would later result in no security warning when the file was opened. (In the actual exploit, the extracted file would be an executable launched without any warning.)\nAfter the August Windows Update, file extraction was different. The same file would be extracted to this location:\nC:\\Users\\username\\AppData\\Local\\Temp\\Temp1710d72f-7438-40d0-be9b-52f7e0651fe9_archive.zip\\file.txt\nWhereby the added GUID part is random and different each time. This blocks exploitation because the exploit code cannot guess the correct path of the extracted file and can therefore not launch it.\nWe located Microsoft's patch that introduced this change in zipfldr.dll, inside the CTempFileNameArray::_TryCreatingInPath function.\nOur Micropatch\nOur micropatch is logically identical to Microsoft's, and produces the same behavior with extracted files.\nPATCH_ID 1487\nPATCH_FORMAT_VER 2\nVULN_ID 7772\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x18514\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 5\nPIT zipfldr.dll!0x180a0,zipfldr.dll!0x186ad,rpcrt4.dll!UuidCreate,rpcrt4.dll!RpcStringFreeW,rpcrt4.dll!UuidToStringW\n;zipfldr.dll!0x180a0 __int16 *ConstructString(HINSTANCE, unsigned int, ...)\n;zipfldr.dll!0x186ad ErrorBlock\ncode_start\nsub rsp, 0x50 ;Create shadowspace and 2 variables\nmov [rsp+0x48], rcx ;Save rcx\nmov [rsp+0x40], rdx ;Save rdx\nmov [rsp+0x38], r9 ;Save r9\nlea rcx, [rsp+0x28] ;Move var1 to rcx to receive UUID\ncall PIT_UuidCreate ;Call UuidCreate\ncmp eax, 0 ;Check if call succeeded\njne ERROR ;Jump to error block if result != 0\nlea rdx, [rsp+0x20] ;Move var2 to rdx to receive pointer to UUID_STRING\nlea rcx, [rsp+0x28] ;Move var1 with UUID to rdx\ncall PIT_UuidToStringW ;Call UuidToStringW to convert UUID on var1 to UUID_STRING and move it to var2\ncmp eax, 0 ;Check if the call succeeded\njne ERROR ;Jump to error block if result != 0\nmov rcx, [rsp+0x48] ;Restore rcx\nmov rdx, [rsp+0x40] ;Restore rdx\nmov r9, [rsp+0x38] ;Restore r9\nmov r8, [rsp+0x20] ;Replace r8 with UUID_STRING from var2\ncall PIT_0x180a0 ;Call ConstructString that output a full path pointer to rax\nmov qword[rsp+0x38], rax ;save rax for later\nlea rcx, [rsp+0x20] ;Get the pointer to UUID_STRING from var2 and move it to rcx\ncall PIT_RpcStringFreeW ;Free the UUID_STRING buffer\nmov rax, [rsp+0x38] ;Restore rax we saved earlier\njmp END ;Continue normal execution\nERROR: ;Error block\nadd rsp, 0x50 ;Restore the stack pointer\njmp PIT_0x186ad ;Jump to the error block\nEND: ;Normal execution\nadd rsp, 0x50 ;Restore stack pointer\ncode_end\npatchlet_end\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, 2 and 3)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, 2 and 3)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Will Dormann for his extensive analysis of exploit samples, related publications, and Microsoft's patch, which made it possible for us to create a micropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "1609edc8-93ca-44f4-93f6-dfe0ff4cd9c5",
                "hash": "5f3b20abfc1882db5c528beb6f97ece460bfbd11b934f8909083de1534223b11",
                "title": "Three More Years of Critical Security Patches for Windows Server 2012 and Windows Server 2012 R2",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/08/three-more-years-of-critical-security.html",
                "link": "https://blog.0patch.com/2023/08/three-more-years-of-critical-security.html",
                "content": "Can't upgrade your Windows Server 2012 to a newer windows server? No problem.\nAs an on-premises Windows Server 2012 user, you probably know that Microsoft plans to end its support this October. This means no more Windows updates, including security fixes, and the chilling prospect of your servers becoming progressively vulnerable as new security issues are inevitably going to be discovered.\nIf you're lucky enough to be an \"eligible customer with Software Assurance under an Enterprise Agreement\", you will be able to purchase up to 3 years of Extended Security Updates (ESU) from Microsoft for an annual cost equal to \"100% of full license price annually\".\nThose of you who aren't eligible or have other reasons not to purchase ESU, but want to keep using your servers securely - we have good news for you!\nRemember Windows Server 2008 R2 going out of support more than three years ago? Well, we security-adopted it and have thousands of customers still running this server securely with our security patches today. Meanwhile, the three-year ESU period for Server 2008 has already ended for on-premises servers, and we committed to continuing our support for at least two more years.\nNow we'll do the same for Windows Server 2012 and Windows Server 2012 R2, starting with three years of critical security patches that will last until October 2026. In contrast to Windows Server 2008 where we only security-adopted the R2 version, we're seeing a sufficient interest in non-R2 version of Server 2012 to add it to the list of our security-adopted products.\nIf you're new to 0patch and our security patches, we have a lot of information in our Help Center but here's a quick overview:\n- 0patch provides critical security patches for vulnerabilities that are likely to be exploited.\n- Our tiny patches (usually just a few CPU instructions) get applied in memory of running processes; we don't change original executable files.\n- Patches get applied and un-applied instantly, without restarting the computer.\n- Apart from critical security patches for vulnerabilities Microsoft will patch on still-supported Windows versions, you will also get our \"0day\" patches for vulnerabilities that don't yet have official security patches.\n- 0patch Central allows for central management of all 0patch Agents.\n- 0patch costs a fraction of the cost of Extended Security Updates. (Consider Pro plan for a single server, and Enterprise plan for multiple servers with central management.)\nTo use 0patch on Windows Server 2012 after October 2023, you will need to:\n- Create a 0patch account if you don't have one yet.\n- Install 0patch Agent on the server and register it to your 0patch account. (See 0patch Agent user manual for instructions on silent deployment and auto-registration in selected group.)\n- Install October 2023 cumulative Windows Update for Windows Server 2012 as soon as possible. (Our patches will be targeting these exact versions of Windows executables. 0patch Agent will work without this update but our patches for EXEs and DLLs modified by October 2023 Windows Update will only work on these latest versions.)\n- Make sure to have a suitable number of licenses in your 0patch account: each computer with a registered 0patch Agent needs one license.\nOctober is getting close - start testing 0patch in your environment now to iron out the wrinkles without too much rush. To start a free trial, create a free account in 0patch Central, then let us know at sales@0patch.com which email you used for that so we can issue a couple of trial licenses to your account.\nFrequently Asked Questions\nQ: How long do you plan to provide critical security patches for Windows Server 2012 after October 2023?\nA: For at least three more years - until October 2026. Depending on the demand, we'll consider an extension.\nQ: How many vulnerabilities have you patched for Windows Server 2008 R2 and Windows 7 since January 2020?\nA: Since January 2020 when we \"security-adopted\" Windows 7 and Windows Server 2008 R2, we have issued patches for 67 critical security issues\non these systems that were at high risk of being exploited. Many of\nthem were later actually confirmed to be exploited in the wild and even\nmore of them became part of various exploit kits that even a low-budget\nattacker could easily use against unpatched systems.\nA:\nOur patches are actual code patches; we add a couple of CPU\ninstructions to the original (vulnerable) executable code to remove the\nvulnerability. Such patches cannot be bypassed, which literally any\nother exploit protection mechanisms - including virtual patches - can be.\nA: We have also security-adopted Microsoft Edge in January 2023, so you'll be able to keep using Edge securely even though it won't get updated by Microsoft anymore. We're also still providing security patches for Internet Explorer, which is still effectively part of the operating system.\nQ: We'd like to see a demo.\nA: Send an email to sales@0patch.com and provide your company name and time zone so we can suggest a couple of dates for the demo.\nQ: We'd like to set up a trial.\nA: Create a free account in 0patch Central, then let us know at sales@0patch.com which email you used for that so we can issue a couple of trial licenses to your account.\nQ: We have more questions about 0patch.A: Our Help Center has a lot of answers but if you can't find yours there, feel free to contact us at sales@0patch.com.\nYep. I'm going with 0patch for my 3 2012R2 servers! They need to hang around for 1-2years. You guys rock.ReplyDelete",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "7f545fb2-2890-4b6e-8ef5-4ca8a2bbead2",
                "hash": "b8e1d5b5eaf7ff0c018d23c6421e8fe1dbdf5dd6c1691879f0e3adbfb744df8c",
                "title": "Micropatches Released For Denial of Service in Microsoft Message Queuing (CVE-2023-28302, CVE-2023-21769)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/07/micropatches-released-for-denial-of.html",
                "link": "https://blog.0patch.com/2023/07/micropatches-released-for-denial-of.html",
                "content": "April 2023 Windows Updates brought fixes for a number of vulnerabilities in Microsoft Message Queuing Service. We first issued patches for the \"Queuejumper\" remote code execution vulnerability (CVE-2023-21554) as its POC became available. Subsequently, we got access to POCs for two additional issues in Microsoft Message Queuing Service: CVE-2023-21769 and CVE-2023-28302, both being remote denial-of-service issues.While still-supported Windows systems have already received the official vendor fix for these vulnerabilities, there are Windows systems out there that aren't receiving security fixes from Microsoft anymore. In order to protect these systems, we have created our own micropatches for these vulnerabilities, which are available through the 0patch service.\nOur\npatches for these issues are similar to Microsoft's. Because the new patch for CVE-2023-28302 is in the same place as our previous patch for CVE-2023-21554, we had to revoke the latter and issue a combined patch for CVE-2023-21554 and CVE-2023-28302. (Which, of course, doesn't require our users to do anything as it all happens automatically.)\nMicropatch Availability\nThese micropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a133703a-703a-4cb9-9adc-cdb07c3501a7",
                "hash": "4694c0ba29bab3c7a4ebec9dd91b5978794c1283f673da800c939ca60f11589a",
                "title": "Micropatches Released For DHCP Server Service Remote Code Execution (CVE-2023-28231)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-dhcp-server.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-dhcp-server.html",
                "content": "April 2023 Windows Updates brought a fix for CVE-2023-28231, a remote code execution vulnerability in DHCP Server service. The vulnerability was reported to Microsoft by security researcher YanZiShuang.\nSubsequently, Numen Cyber published a POC and DarkRelay Security Labs published their analysis, both of which allowed us to reproduce the issue and create a\nmicropatch for Windows computers that haven't received an official fix\nfrom Microsoft.\nWhile\nstill-supported Windows servers have already received an official\nvendor fix for this vulnerability, Windows Server 2008 R2 isn't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatch for this\nvulnerability, which is available through the 0patch service.\nOur patch is logically identical to Microsoft's.\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows Server 2008 R2\nThis micropatch has already been distributed to, and applied on, all online 0patch Agents in PRO or Enterprise accounts (unless Enterprise group settings prevent that).\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Numen Cyber for sharing their POC, and DarkRelay Security Labs for sharing their analysis, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "e4e3305c-3fc4-4987-96c7-2abff5f0c5fd",
                "hash": "31dab16f9b626d312afe7ddce27d7aa1943f3212eb1f589489217ba3aed9875d",
                "title": "Micropatches Released For Windows Error Reporting Service Elevation of Privilege (CVE-2023-36874)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/09/micropatches-released-for-windows-error.html",
                "link": "https://blog.0patch.com/2023/09/micropatches-released-for-windows-error.html",
                "content": "\With July 2023 Windows Updates, Microsoft brought a fix for CVE-2023-36874, a local privilege escalation vulnerability in Windows Error Reporting Service that was found both by Google TAG and CrowdStrike to be exploited in the wild in the previous month.\nWhen security researcher Filip Dragovic released a proof of concept for this issue, we could reproduce it and start working on a patch.\nThe Vulnerability\nIn short, the Windows Error Reporting Service has a number of functions exposed via its RPC interface, so a local process can ask it to submit a chosen error report via function SubmitReport. This function impersonates the calling process' user and at some point launches wermgr.exe, one of the WER executables. Normally, wermgr.exe would be launched from C:\\Windows\\System32\\, but since the service is impersonating the caller (i.e., the attacker), the CreateProcess function honors any symbolic links the caller may have in place. The attacker can, for instance, create a symbolic link mapping C:\\ to an arbitrary location such as C:\\Users\\public\\test , which will be used by the CreateProcess call. Consequently, the WER service would launch C:\\Users\\public\\test\\Windows\\System32\\wermgr.exe, attacker's executable with the same name - and according to the documented behavior of CreateProcess, the executable would be launched with the token of the service (not the impersonation token). In other words: as Local System.\nThe Official Patch\nMicrosoft's fix for this issue was very simple: they effectively disabled the SubmitReport function by immediately returning error \"Not implemented\" (0x80004001). This means that it is no longer possible to submit an error report via RPC - and perhaps this was never really needed anyway.\nOur Micropatch\nOur micropatch is logically identical to Microsoft's, and produces the same behavior.\nMODULE_PATH \"..\\AffectedModules\\wercplsupport.dll_10.0.17134.1967_Win10-1803_32-bit_u2021-05\\wercplsupport.dll\"\nPATCH_ID 1488\nPATCH_FORMAT_VER 2\nVULN_ID 7774\nPLATFORM win32\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x82ac\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\nPIT wercplsupport.dll!0x82eb\ncode_start\nmov eax, 80004001h ; Error code for \"Not Implemented\"\njmp PIT_0x82eb ; Jump directly to end of function\ncode_end\npatchlet_end\nLet's see our micropatch in action. With 0patch disabled, the POC manages to create a new user \"test\" on the computer by launching a fake C:\\Users\\public\\test\\Windows\\System32\\wermgr.exe. With 0patch enabled, the POC fails to do that because wermgr.exe is not being launched from function SubmitReport at all.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Filip Dragovic for sharing their proof of concept, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "fbbf37e6-4bf9-48ea-8b1a-6e9f55826722",
                "hash": "fb79d99bf1f5057bc341f8c438fa37663a6343ca3441aaec6fb0d3e32f0ec77b",
                "title": "Micropatches Released For Two Windows CNG Key Isolation Service Vulnerabilities (CVE-2023-28229, CVE-2023-36906)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/micropatches-released-for-two-windows.html",
                "link": "https://blog.0patch.com/2023/10/micropatches-released-for-two-windows.html",
                "content": "Last month, security researcher @k0shl of Cyber Kunlun published a proof-of-concept for CVE-2023-28229, an elevation of privilege vulnerability in CNG Key Isolation Service. The same POC also demonstrated exploitation of CVE-2023-36906, an information disclosure vulnerability in the same service discovered by the same researcher.\nMicrosoft had previously provided fixes for these issues in April and August 2023, respectively. According to CISA, CVE-2023-28229 was found to be exploited in the wild.\nCVE-2023-28229\nThis bug is a race condition in the Key Isolation service running in lsass.exe that allows an attacker to use already-freed memory inside a structure. Its root cause is flawed critical section management that protects heap-based data structures from concurrent access but for some reason excludes reference counter initializations and updates. When a user spawns many concurrent threads that call SrvCryptCreatePersistedKey and SrvCryptFreeKey, these threads eventually cause the execution of said functions such that a key data structure is freed in one thread but then still used in another thread by calling the structure destructor method from already deallocated vftable.\nMicrosoft patched this bug in April 2023, and their patch included relocating several critical sections over various pieces of code. Our approach to patching this issue was more minimalistic as we only switched two instructions to place the increasing of the reference counter in function SrvAddKeyToList inside the critical section. It was our assessment that this very instruction was the most critical enabler of exploitability.\nDuring the analysis, we also noticed that this bug doesn't affect Windows 7 and Server 2008 R2 systems as the relevant code in keyiso.dll is completely different there and does not use critical sections in the same way as in newer versions of Windows.\nSource code of our patch:\nMODULE_PATH \"..\\AffectedModules\\keyiso.dll_10.0.19041.388_Win10-2004_64-bit_u2021-12\\keyiso.dll\"\nPATCH_ID 1509\nPATCH_FORMAT_VER 2\nVULN_ID 7723\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x2d2f\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 16 ; remove these two instructions\nPIT ntdll.dll!RtlLeaveCriticalSection\ncode_start\nlock inc dword[rdi+0x8] ; and re-add them in the reverse order\ncall PIT_RtlLeaveCriticalSection\ncode_end\npatchlet_end\nCVE-2023-36906\nThis information disclosure issue stems from the way the Key Isolation Service implements SetProviderProperty and GetProviderProperty functions. When calling SetProviderProperty, the attacker can specify a string of some length, but can then request its value using GetProviderProperty specifying a larger length.When this happens, the Key Isolation Service reads the referenced buffer without any additional checks and reveals the content of memory beyond the designated buffer. This allowed the POC to obtain an internal object address, which it can then use to exploit CVE-2023-28229 in a more reliable way.\nMicrosoft's patch for this issue added a forced zero-termination of the user-supplied string such that subsequent reading from the buffer could not extract information beyond the bounds of the buffer.\nWe chose a similar but more minimalistic approach by setting the HEAP_ZERO_MEMORY flag to the RtlAllocateHeap call, causing the allocated space to be initialized with zeroes.\nMODULE_PATH \"..\\AffectedModules\\ncryptprov.dll_10.0.19041.2193_Win10-21H1_64-bit_u2022-12\\ncryptprov.dll\"\nPATCH_ID 1519\nPATCH_FORMAT_VER 2\nVULN_ID 7795\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x6bf6\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\ncode_start\nadd r8, 0x2 ; increase the size of the allocated buffer\nmov edx, 0x8 ; set the HEAP_ZERO_MEMORY flag for the upcoming\n; RtlAllocateHeap call\ncode_end\npatchlet_end\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank @k0shl of Cyber Kunlun for sharing their proof of concept, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "07fd1242-e418-4382-8e00-695286a857f3",
                "hash": "bef31dace3e5d1aa2a49652a416e3898c868e360891ce6fbababbfd8fc08025a",
                "title": "0patch Security-Adopts Windows 11 v21H2 Home and Pro to Keep it Running Securely",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/0patch-security-adopts-windows-11-v21h2.html",
                "link": "https://blog.0patch.com/2023/10/0patch-security-adopts-windows-11-v21h2.html",
                "content": 'This October brought the last security updates for Windows 11 version 21H2 Home and Pro versions. Windows 11 require a Trusted Platform Module (TPM) 2.0 to be present on the computer, but for some time, it was possible to install Windows 11 version 21H2 without TPM. Many users have done that and now that this version went out of support, they cannot upgrade to Windows 11 v22H2, and thus cannot receive future security fixes. While many modern CPU versions are supported by Windows 11, computers with unsupported CPU versions are still happily doing their work in large numbers around the World.\nTo keep these computers secure, we security-adopted Windows 11 v21H2 and will provide critical security patches for it from this month on, for at least one year (and longer if there is sufficient demand).\nWe have previously security-adopted many other Windows versions, including Windows Server 2012, which has also reached its end of support this month.\nThese micropatches will be included in 0patch PRO and Enterprise licenses along with all other micropatches we\'re issuing - which means that users protecting their Windows 11 v21H2 with 0patch will also receive our micropatches for "0day" vulnerabilities in various products.\nWe welcome all interested organizations to contact sales@0patch.com for information about pricing, deployment, or setting up a trial.To learn more about 0patch, please visit our Help Center.\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "13158fc3-f69e-4ade-bc6e-d83780839a69",
                "hash": "1bf512419472f72dbdadfc0413bbf53ef5e380c8f32cc21754d1c6ea7f6ea458",
                "title": "Micropatches Released For Remote Code Execution in Windows OLE (CVE-2023-29325)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-remote-code.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-remote-code.html",
                "content": "May 2023 Windows Updates brought a fix for CVE-2023-29325, a remote code execution vulnerability in Microsoft OLE (Object Linking and Embedding). The vulnerability was reported to Microsoft by Will Dormann with Vul Labs.\nWill found that two of the many COM objects installed on every Windows system by default merely have to be referenced by their respective CLSIDs in a rich text email for Outlook to experience an access violation exception.\nThere is almost no public information on what these two COM objects were intended to do on a Windows system, but since Microsoft's fix was to block them, they probably aren't essential to any important operation. While Microsoft appears to have blocked these offensive/vulnerable COM objects via COM activation filter, they provided no remedy for unsupported Windows versions such as Windows 7 or older Windows 10. Furthermore, still-supported Office versions were also patched to prevent usage of these two COM objects, but older versions like 2010 or 2013 weren't.\nFor our users of older Office versions on older Windows systems we therefore had to create a patch of our own.\nOur\npatch does effectively the same as Microsoft's does on still-supported Office versions: if a COM object is referenced with one of the \"offending\" CLSIDs, object activation is prevented and instead of instantiating such object, Office just writes out the CLSID and the associated DLL name.\nMicropatch Availability\nOur micropatch was written for the following security-adopted versions of Office with all available updates installed:\n- Office 2010\n- Office 2013\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Will Dormann for sharing vulnerability details, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "bee9366d-aace-470d-b898-972d46553a33",
                "hash": "4956144c723a27214cad73ece8aff862859787bb5d0de92cf99a56bc5cde5984",
                "title": 'Micropatches Released For "QueueJumper" Remote Code Execution in Microsoft Message Queuing (CVE-2023-21554)',
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/05/micropatches-released-for-queuejumper.html",
                "link": "https://blog.0patch.com/2023/05/micropatches-released-for-queuejumper.html",
                "content": "April 2023 Windows Updates brought a fix for CVE-2023-21554, a remote code execution vulnerability in Microsoft Message Queuing Service. The vulnerability, nicknamed \"QueueJumper\" was reported to Microsoft by Wayne Low of Fortinet's FortiGuard Lab and Haifei Li with Check Point Research.\nThe first proof-of-concept became available on April 30, when Omair from Krash Consulting published it on GitHub. Another proof-of-concept by zoemurmure became available on May 18. Both of these made it possible for us to create a micropatch for this issue.\nThe\nvulnerability allows a remote unauthenticated attacker to cause memory corruption on a Windows computer running Microsoft Message Queuing Service, which can often be extended to executing arbitrary code on the computer. A detailed technical analysis (in Chinese) was provided by zoemurmure,\nOur patch prevents memory corruption in a similar way as Microsoft's. In this rare case, the vulnerable service must be restarted on Windows 10 in order for our patch to get applied because it employs the \"arbitrary code execution\" exploit mitigation that interferes with our operations. Mind you, Microsoft's patch requires a computer restart, but 0patch micropatches typically get applied without even relaunching vulnerable processes. This is not the case here, so make sure to restart the MSMQ service.\nLet's see our micropatch in action. With 0patch\ndisabled, the POC immediately crashes the Microsoft Message Queuing Service. With\n0patch enabled, the attack doesn't work anymore because the invalid packet is detected and blocked by our patch.\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Omair from Krash Consulting and zoemurmure for sharing their POCs, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a3f0ca62-d03f-401e-b452-6ac902d512ef",
                "hash": "c29b17ca2b9b813e833e2466871bd5788ff5124dadafa2ca1a3cfe37b70c66db",
                "title": "Micropatches for Local Privilege Escalation in Microsoft Installer (CVE-2023-21800)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/04/micropatches-for-local-privilege.html",
                "link": "https://blog.0patch.com/2023/04/micropatches-for-local-privilege.html",
                "content": "February 2023 Windows Updates brought a fix for CVE-2023-21800,\na vulnerability in Windows Installer that allows a local low-privileged attacker to run their code as Local System. The\nvulnerability was reported to Microsoft by Adrian Denkiewicz with Doyensec. Adrian subsequently wrote an article detailing the vulnerability, which allowed us to reproduce it and create a patch for our users.\nThe vulnerability is in one sense a typical symbolic link issue, the types of which we've been seeing in abundance in the past years, but it is also interesting because it includes a privileged process (msiexec.exe running as Local System) inheriting environment variables from the attacker's parent process. This is something we haven't seen before and it could generally be exploited in different interesting ways.\nAdrian decided to exploit it by redefining the PROGRAMDATA environment variable and thereby \"redirect the “All Users” profile to the arbitrary location which is writable by the [local attacker].\" Installation of a product for all users usually includes creating files in All Users' Start Menu folder - which is normally write-protected against a local non-admin user, but by redirecting this folder to an attacker-controller location allows the attacker to create a symlink there and wait for the installer process to use this symlink. If the symlink points to some system file, this effectively means the installer process (running as Local System) will delete such system file.\nArbitrary file deletion can be turned into arbitrary code execution as Local System, as was first shown by Jonas Lykkegård in 2020 using Windows Error Reporting Service, and subsequently also by Abdelhamid Naceri using Windows Installer.\nWhile\nstill-supported Windows systems have already received an official\nvendor fix for this vulnerability, there are Windows systems out there\nthat aren't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatches for this\nvulnerability, which are available through the 0patch service.\nOur patches add a check to the affected code to see if the path used for deleting a file contains a symlink. If it does, the operation is blocked (the file is not deleted).\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Adrian Denkiewicz with Doyensec for sharing their POC, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "c330165f-ded5-4a8a-b0f3-ddee6eb92d6b",
                "hash": "4fa068a606adb4b8bbfd91b2165dc4528dbe30b76ca0dcd32636dfd5ca554ce6",
                "title": "Free Micropatches For Microsoft Access Forced Authentication Through Firewall (0day)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/free-micropatches-for-microsoft-access.html",
                "link": "https://blog.0patch.com/2023/11/free-micropatches-for-microsoft-access.html",
                "content": 'Update 2/14/2024: Either January 30 or February 1 Office update brought a fix for this issue: now, Access warns the user for any ODBC connection to SQL Server. Our patch only shows a warning when such connection is made on non-standard ports 80 or 443, because these would carry user\'s NTLM hash through a company firewall, so Microsoft\'s patch might display more - in our view unnecessary - warnings. So what CVE ID did this issue get? Well, it doesn\'t seem to have gotten one: neither January 30 nor February 1 Office update mention any changes in Access, and February Windows Updates also have no suitable match. So far, this issue seems to have been fixed silently. With official patch available, our patches for this issue are no longer FREE and require a PRO or Enterprise license. Our patch was available 66 days before Microsoft\'s.\nOn November 9, 2023, Check Point Research published an article about an "information disclosure" / "forced authentication" vulnerability in Microsoft Access that allows an attacker to obtain the victim\'s NTLM hash by having them open a Microsoft Office document (docx, rtf, accdb, etc.) with an embedded Access database.\nMany similar vulnerabilities have been disclosed in the last few years, all having a common theme of forcing a Windows process to authenticate to attacker\'s server and thereby disclose credentials of Windows user or a privileged service account to the attacker. Microsoft has patched some of them, but decided not to patch others: DFSCoerce, PrinterBug/SpoolSample and PetitPotam still don\'t have an official patch today and our micropatches remain the only patches available for these (our customers who can\'t stop using NTLM really appreciate them). RemotePotato0 was initially experiencing a similar fate but was then silently fixed 9 months after publication. ShadowCoerce was just as silently fixed 6 months after publication. On the other hand, a WordPad vulnerability from this same category, leaking user\'s NTLM hash to a web share upon opening an RTF document, was openly patched by Microsoft just last month.\nIt\'s hard to tell how Microsoft decides whether to patch a forced authentication vulnerability or not - and this one in Microsoft Access just adds to the confusion. Let\'s see how.\nThe Vulnerability\nAs Haifei Li, security researcher at Check Point, describes in their detailed article, a remote SQL Server database link can be inserted to a Microsoft Access database with "Windows NT authentication", which will force such authentication - and leak user\'s NTLM hash - every time the table with such link is refreshed in Access. So far, this would be a "classic" forced authentication issue, only different from most others in the fact that the connection isn\'t established on "classic" SMB and RPC ports but on SQL Server\'s port 1433. Which is expected to be filtered for outbound traffic from internal network towards the Internet.\nBut as Haifei noted, the database link can override the default port and specify an arbitrary port, including 80 or 443 - which are both typically allowed by firewalls for outbound connections so users in the network can browse the Internet. This makes things more interesting, and impact-wise almost comparable to the previously mentioned WordPad issue. Why "almost"? Because it\'s not enough just to open a Word document with such Access database embedded: to force a refresh of the database link, the user has to "open" the linked Access table by clicking on it.\nTo overcome this limitation, Haifei found that the AutoExec macro can be used to automatically open the table and force a refresh. But hey, macros have already been blocked for documents coming from the Internet, so how would this even work?\nWell, we first need to understand something Haifei calls "simple Access macros". Admittedly, we did not know that Access macros come in two flavors, and we couldn\'t find any relevant results on this phrase on the Internet, but that\'s probably because Haifei usually knows more about the targeted product than the Internet does.\n"Simple Access macros" are limited macros that only allow you to perform a set of predefined harmless actions, in contrast to "full-fledged regular macros" (sorry, another unofficial term) that are actual VBScript code capable of doing pretty much anything on the computer, including downloading and executing ransomware. It turned out that simple Access macros are blocked neither by the Access macro policy nor by the Protected View. In addition, if you name such macro AutoExec, it will get executed upon opening the Access database.\nPutting two and two together, Haifei created an Access database with a remote SQL Server database link, Windows NT authentication, and an AutoExec macro that opened the linked table - and embedded that in a Word document because users prefer opening Word documents to Access databases. Now, there is no "almost" there anymore: this issue is impact-wise identical to the WordPad issue.\nCheckpoint reported this vulnerability to Microsoft in January 2023 and were in July still "unable to obtain conclusive answer because the issue is considered as “low/none severity”, according to the MSRC reply." They did notice, however, that at some point during this period, Access started showing this security dialog when opening their PoC file:\nSo, was this issue silently fixed too? Nope, at least not successfully: while the above dialog is certainly triggered by the presence of the AutoExec macro (it shows even when AutoExec is the only active content), closing this informational dialog either by pressing OK or clicking the X still leads to the AutoExec macro being executed and user\'s credentials being sent to attacker\'s server. The only way to block the exploit when this dialog is displayed is to forcefully kill the msaccess.exe process, e.g. using Windows Task Manager.\nIn summary, we have active content that is detected, user informed about it being blocked, and then still getting executed unless the user kills Access with Task Manager. Not ideal.\nOur Analysis\nWe tried to make sense of all this and here\'s what we think happened.\nWe think Microsoft never intended to patch the reported issue due to its "low/none severity" assessment, which we think was wrong because its impact is comparable to the WordPad issue they had patched last month with severity "important".\nWe think the security dialog that started appearing in Access is part of Microsoft\'s slow and painful process of gradually restricting malicious macros while not getting hammered by customers whose Office documents they might break along the way. (See here and here for examples.) Microsoft is doing the right but difficult thing here, addressing a very popular attack avenue, and they deserve huge credit for that.\nWe think that the current macro-blocking logic in Access is flawed: it clearly detects the AutoExec "simple" macro, it tells the user that macros are blocked - but then doesn\'t block it. Microsoft needs to fix this, but it\'s not hard to imagine thousands of enterprises using "simple" macros on a daily basis, and thousands of angry calls to the Office PM the next day if they actually start getting blocked. Still, this needs to be fixed this because it\'s confusing and useless: either don\'t trip on simple macros, or trip on them and block them.\nWe expect Microsoft will do something about this all; they will probably fix the macro logic and the dialog, but will they revise the severity of the issue reported by CheckPoint and fix it too?\nMaybe they will, maybe they won\'t - but we did.\nOur Micropatch\nWe pondered on how to address this: shall we fix Microsoft\'s macro logic so that simple macros will indeed be blocked when the dialog says they would be? If we did, and broke "simple" macros for our users, they would probably blame Microsoft and make angry calls to the surprised Office PM. We don\'t presume we understand the complex dynamics between a huge software vendor who decades ago made a convenient powerful feature that boosted product usability but has since become a major security risk, and organizations that have this feature embedded in critical processes but can at the same time be seriously harmed because of it.\nSo we decided on a different approach: we would block database connections from Access to SQL Server on ports 80 and 443. While it is not impossible for some real, legitimate SQL Server to be accessible on port 80/443 and some real, legitimate Access database being linked to it, we think it\'s realy unlikely. Note that such patch would not block SQL Server connections on port 80/443 from any other client, just Microsoft Access.\n"How about other database servers that could be linked to remotely," you ask, "some of them may also support Windows NT authentication and be accessible on arbitrary port?"\nWell, the main risk is posed by the ones supported on Windows by default, without a non-default ODBC driver having to be installed on user\'s computer. And SQL Server is the only one that fits the bill.\nThis is our micropatch:\nMODULE_PATH "..\\Affected_Modules\\acecore.dll_16.0.16924.20054_64bit_u202311_Office2016_2019_2021_365\\acecore.dll"\nPATCH_ID 1569\nPATCH_FORMAT_VER 2\nVULN_ID 7803\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x1955a0\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\nPIT msvcrt.dll!wcsstr,msvcrt.dll!_wtoi,acecore.dll!0x195637,shlwapi.dll!StrStrIW\ncode_start\npush r15 ;save the original r15 value\nsub rsp, 0x28 ;create shadowspace\nlea r15, [rbp+0x60] ;move the connection string pointer to r15\nmov rcx, r15 ;move the connection string pointer to the first argument\ncall STR1 ;get the string "SQL Server" to the stack\ndb __utf16__(\'SQL Server\'),0,0\nSTR1:\npop rdx ;pop the "SQL Server" string pointer from the stack\ncall PIT_StrStrIW ;call case insensetive string search\ncmp rax, 0x0 ;check if SQL Server substring exists\nje SKIP ;if not skip the patch\nLOOP: ;the port searching loop\nmov rcx, r15 ;move the connection string pointer to the first argument\ncall STR2 ;load the "," character onto stack\ndb __utf16__(\',\'),0,0\nSTR2:\npop rdx ;pop the "," character to rdx\ncall PIT_wcsstr ;call wcsstr to search for "," and if found return the addres to rax\ncmp rax, 0x0 ;check if "," was found\nje SKIP ;if no matches, we\'re done\nadd rax, 0x2 ;if match was found increment the pointer to string by 1 char\nmov r15, rax ;move the incremented pointer to r15 for next iteration\nmov rcx, rax ;move the incremented pointer to the first arg\ncall PIT__wtoi ;convert the string after the "," to a number\ncmp rax, 0x50 ;check if that number is 80 (decimal)\nje BLOCK ;if it is, block the connection\ncmp rax, 0x1bb ;check if that number is 443 (decimal)\nje BLOCK ;if it is, block the connection\njmp LOOP ;if nothing was found repeat the search\nBLOCK: ;block the connection\ncall PIT_ExploitBlocked ;popup the Exploit Blocked notification\nadd rsp, 0x28 ;clear shadowspace\npop r15 ;restore the original r15 value\njmp PIT_0x195637 ;jump to the error block\nSKIP: ;skip the patch and continue normal execution\nadd rsp, 0x28 ;clear shadowspace\npop r15 ;restore the original r15 value\ncode_end\npatchlet_end\nLet\'s see our micropatch in action. In the video below we can see attacker\'s computer on the left and user\'s computer on the right. The user is running fully updated Office 365. On attacker\'s computer we can see Wireshark, a network monitoring tool, that is filtered to only show communication with the IP address of user\'s computer.\nFirst, with 0patch disabled, the user opens a malicious Access file in Microsoft Access, and as described above, a security dialog is displayed informing them that active content in the file has been blocked (we know it wasn\'t). As the user closes this dialog, the linked database connection is established with attacker\'s computer on port 80 due to the AutoExec macro being executed.\nNext, with 0patch enabled, the user again opens attacker\'s Access file. This time, as the "blocked active content" security dialog is closed, our patch detects that a connection to a SQL Server is attempted on port 80 and blocks it. It also records an "Exploit blocked" event and shows an alert to the user.\nMicropatch Availability\nMicropatches were written for the following versions of Microsoft Office with all available Updates installed:\n- Office 2010*\n- Office 2013*\n- Office 2016\n- Office 2019\n- Office 2021\n- Office 365\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them. If you\'re using Windows or Office that aren\'t\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won\'t be exploited on your computers. (By the way, still using Windows Server 2012? 0patch has you covered!)\nIf you\'re new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Haifei Li with Check Point for sharing the details of this vulnerability, which made it possible for us to create a\nmicropatch for our users.\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "00492ba3-e057-4a39-888f-71d018d91dd0",
                "hash": "af70d14cff12f28551b7b376cd2f6924c9a00fc525042c810cddf96598370d17",
                "title": 'The "EventLogCrasher" 0day For Remotely Disabling Windows Event Log, And a Free Micropatch For It',
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2024/01/the-eventlogcrasher-0day-for-remotely.html",
                "link": "https://blog.0patch.com/2024/01/the-eventlogcrasher-0day-for-remotely.html",
                "content": "Update 2/14/2024: February Windows Updates did not patch this issue, so it remains a 0day. We did have to re-issue patches for three Windows versions because the updates changed wevtsvc.dll and patches had to be ported to the new versions.\nUpdate 3/14/2024: March Windows Updates did not patch this issue, so it remains a 0day. We did have to re-issue our patch for Windows Server 2022 because the update changed wevtsvc.dll and our patch had to be ported to the new DLL.\nUpdate 4/10/2024: April Windows Updates did not patch this issue, so it remains a 0day (now 70 days without an official fix).\nIf you ever troubleshooted anything on Windows or investigated a suspicious event, you know that Windows store various types of events in Windows Event Log. An application crashed and you want to know more about it? Launch the Event Viewer and check the Application log. A service behaving strangely? See the System log. A user account got unexpectedly blocked? The Security log may reveal who or what blocked it.\nAll these events are getting stored to various logs through the Windows Event Log service. Unsurprisingly, this service's description says: \"Stopping this service may compromise security and reliability of the system.\"\nThe Windows Event Log service performs many tasks. Not only is it responsible for writing events coming from various source to persistent file-based logs (residing in %SystemRoot%\\System32\\Winevt\\Logs\\), it also provides structured access to these stored events through applications like Event Viewer. Furthermore, this service also performs \"event forwarding\" if you want your events sent to a central log repository like Splunk or Sumo Logic, an intrusion detection system or a SIEM server.\nTherefore, Windows Event Log service plays an important role in many organizations' intrusion detection and forensic capabilities. And by extension, their compliance check boxes.\nThe \"EventLogCrasher\" 0day\n\"That's a nice Event Log service you have here.\nWould be a shame if something happened to it.\"\n- every attacker\nOn January 23, 2024, security researcher Florian published details on a vulnerability that allows any authenticated user in a Windows environment (including in Windows domain) to crash Windows Event Log service either locally or on any remote computer (!)\nAs Florian explained, \"according to MSRC, the bug does not meet the bar for servicing and therefore they allowed me to publish a proof of concept.\" In addition, \"they claimed it was a duplicate of another bug from 2022 (coincidence?) that didn't meet the requirements for servicing.\"\nFlorian's POC (proof of concept) is remarkably simple: it makes a single call to RegisterEventSourceW, which retrieves a handle to an event log on the specified computer. (This function allows an application on computer A to obtain a handle to, say \"Application\" log on computer B, by sending a specific request to computer B's Windows Event Log service.) However, before the request is sent to the target computer, the POC modifies its in-memory structure to confuse the receiving Event Log service. It manages to confuse it so much to cause a null-pointer dereference and crash the service. The attack only takes a second and works reliably.\nThe good news at this point is that Windows Event Log service is set to automatically restart if unexpectedly stopped. The bad news is that it only gets restarted twice, then not anymore. So crashing the Event Log service three times makes it persistently stopped.\nNow, what does this mean? With Windows Event Log service stopped, no events can be written to logs, forwarded to other locations, or read from logs using event logging functions. For all practical purposes, logging has gone dark. And indeed, any Application events, and many other event source's events that occur during the service downtime get irrecoverably lost.\nFortunately, Security and System events don't get lost - at least not yet. Someone was smart enough to expect the possibility of a temporarily unavailable Event Log service and implemented an event queue for these important events. If Windows can't report a Security or System event (perhaps some others too, we did not investigate), they put such event in some internal queue that then periodically retries to log all queued events until they finally succeed. We found no useful information about this queue's implementation or configuration; in fact, the only official mention of this queue we could find was Event 4612(S), described as \"This event is generated when audit queues are filled and events must be discarded. This most commonly occurs when security events are being generated faster than they are being written to disk.\"\nOur tests have shown that such queue in fact exists: if we left the Event Log service stopped and let some Security and System events occur, these events - of course - could not get logged. But after we started the Event Log service, they quickly got logged. Clearly something was storing them and making a real effort to get them logged. This is not really perfect news for the attacker: while security and system events they might trigger would not be logged while the Event Log service was down, they would get logged if the admin subsequently started the service.\nObviously, our next step was to see if the event queue survives a computer restart. Assuming that every Windows computer eventually gets restarted (at least still-supported ones on every second Tuesday), and that an admin noticing problems with logging may also decide to restart the computer, the question was: would queued events get lost?\nAnd the answer was, they do not get lost. Apparently the event queue, presumably in memory, gets stored to disk when the system is gracefully shut down or restarted, and re-read upon startup. Once the Event Log service is running again, the queue is emptied into appropriate logs, with correct time stamps nonetheless.\nWhat about a non-graceful system shutdown or restart? If the attacker manages to cause a blue screen on the computer where events are being stored in the event queue, these events will actually be irrecoverably lost. So there's an unexpected bonus value in ping of death vulnerabilities.\nThe final question was, can Windows firewall or access permissions stop this attack? After all, event-collecting apps such as Sumo Logic require enabling remote event log management-related firewall rules (disabled by default) and adding the remote user to the Event Log Readers group (empty by default). Nope, even though such apps do not work and connecting to a remote Event Log with Event Viewer does not work without such firewall and permissions adjustments, the attack at hand works by default. In fact, the attack takes place over a named pipe (i.e., SMB protocol), and unless you can afford to completely disable SMB - no network shares, no printers, no many other things - we don't believe you can configure Windows to prevent this attack from an attacker in your network.\nSo far we've discovered that a low-privileged attacker can crash the Event Log service both on the local machine and on any other Windows computer in the network they can authenticate to. In a Windows domain, this means all domain computers including domain controllers.\nDuring the service downtime, any detection mechanisms ingesting Windows logs will be blind, allowing the attacker to take time for further attacks - password brute-forcing, exploiting remote services with unreliable exploits that often crash them, or running every attacker's favorite whoami - without being noticed.\nKnowing that the \"dark times\" can soon end when some admin decides to restart machines or start the Event Log service, a clever attacker could simply run the POC in a never-ending loop to make sure that as soon as the Event Log service is back up, it gets crashed again. It would be really difficult for an admin to even know that it was an attacker crashing the service, as we all know computer things often stop working unexpectedly even without malicious assistance.\nKeeping the service down long enough could, after some time, reach the point of saturating the event queue to its limit - at least we assume there's a limit or there wouldn't have been a need for Event 4612(S). Having reached this point, attacker's activities would from there on be irrecoverably un-logged.\nThe Flaw\nAs Florian noted in the POC document, \"the crash occurs in wevtsvc!VerifyUnicodeString when an attacker sends a malformed UNICODE_STRING object to the ElfrRegisterEventSourceW method exposed by the RPC-based EventLog Remoting Protocol.\"\nIndeed, the POC causes the wevtsvc!VerifyUnicodeString function inside the Event Log service to reference a null pointer, which causes an unhandled access violation. This function received a single argument, a pointer to a UNICODE_STRING structure, whereby for some reason, the Buffer element of the structure, which should point to the actual buffer, points to 0. The function doesn't expect that, at least not in the first part of the code, and crashes as shown on the image below. Also on the image, you can see that later in the code there is a check for the pointer being 0 - but too late.\nVulnerable function wevtsvc!VerifyUnicodeString\nOur immediate goal was to provide a patch to our users as quickly as possible, so we haven't investigated further how the UNCODE_STRING structure was created with a null pointer. We plan to do that later, as it may reveal other similar flaws.\nOur Micropatch\nOur patch is simple: we just added a test for null pointer where such test was missing in the original code. The patch therefore consists of just two instructions: a compare operation and a conditional jump. The image below shows our patch (green code blocks) inserted in the original code (white blocks and the blue \"Trampoline\" block).\nOur patch inserted in the original code\nThe following video shows both the POC and our patch in action. On the left side is the target computer, a fully updated Windows Server 2019 acting as domain controller. The firewall rules are in their default configuration, with all three Remote Event Log Management rules disabled, to show that the firewall does not stop the attack. The Event Log service is running and 0patch Agent is initially disabled.\nOn the right side is the attacker's Windows workstation, whereby the attacker is a regular Domain Users member. The attacker launches the POC against the domain controller and immediately crashes the Event Log service.\nThe same test is then repeated with 0patch Agent enabled, which applies our in-memory micropatch to the Event Log service process (of course without restarting the computer). This time, the POC fails to crash the service because our patch detects the presence of a null pointer and makes sure it does not cause a memory access violation.\nMicropatch Availability\nSince\nthis is a \"0day\" vulnerability with no official vendor fix available,\nwe are providing our micropatches for free until such fix becomes\navailable.\nMicropatches were written for:\n- Windows 11 v22H2, v23H2 - fully updated\n- Windows 11 v21H2 - fully updated\n- Windows 10 v22H2 - fully updated\n- Windows 10 v21H2 - fully updated\n- Windows 10 v21H1 - fully updated\n- Windows 10 v20H2 - fully updated\n- Windows 10 v2004 - fully updated\n- Windows 10 v1909 - fully updated\n- Windows 10 v1809 - fully updated\n- Windows 10 v1803 - fully updated\n- Windows 7 - no ESU, ESU1, ESU2, ESU3\n- Windows Server 2022 - fully updated\n- Windows Server 2019 - fully updated\n- Windows Server 2016 - fully updated\n- Windows Server 2012 - no ESU, ESU1\n- Windows Server 2012 R2 - no ESU, ESU1\n- Windows Server 2008 R2 - no ESU, ESU1, ESU2, ESU3, ESU4\nThese micropatches have already been distributed to all online 0patch Agents. If you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Florian for sharing vulnerability details, which allowed us to reproduce it and create a micropatch. We also encourage all security researchers who want to see their vulnerabilities patched to privately share them with us.\nFrequently Asked Questions\nQ: Which Windows versions are affected?\nA: Currently, ALL Windows versions are affected, from Windows 7 up to the latest Windows 11 and from Server 2008 R2 to Server 2022\nQ: What level of access does the attacker need to exploit this?\nA: The attacker needs network connectivity to the target computer, and be able to authenticate to said computer as any kind of user (even a low-privileged one). Therefore, the attacker can always crash the Event Log service on the local machine, and can crash Event Log service on all Windows computers in the same Windows domain, including on domain controllers.\nQ: Can this be exploited remotely by an attacker via the Internet?\nA:No, the attacker must be able to send SMB requests to the target computer. Internet-facing Windows computers are unlikely to have SMB connectivity open to the Internet, and Windows computers in local networks even less so. The attacker must therefore already be in the local network.\nQ: Is there any way to mitigate this attack with Windows configuration?\nA: Short of denying SMB connectivity to the target computer (which would disable file and printer sharing, and various RPC-based mechanisms), we're not aware of any way to mitigate the attack.\nQ: Doesn't Windows Firewall block this attack? After all, there are three pre-defined firewall rules for allowing Remote Event Log Management, which need to be manually enabled to allow remote event log management.\nA: While these firewall rules indeed need to be enabled to allow remote event log management, this attack works regardless. Again, it works in the default Windows Firewall configuration.\nQ: Does this vulnerability affect our IDS/SIEM?\nA: It does if your IDS/SIEM is collecting Windows event logs. If the attacker crashes the Event Log service on a computer, that computer won't be able to forward events to such IDS/SIEM. Any alerts that may be triggered based on Windows events will not be triggered during this time.\nQ: Are events occurring during the Event Log service downtime irrecoverably lost?\nA: Events generated by sources that don't use event queuing are irrecoverably lost - this includes Application logs (including events about Event Log service crashing). Security and System events are queued in memory and can get stored to the event log later when Event Log service becomes available again. Queued events can get irrecoverably lost in case the computer ungracefully shots down (e.g., due to a blue screen or power-off), or if the queue gets full. Unfortunately we don't know how many events the queue can hold.\nQ: What should we do if we suspect someone crashed the Event Log service on one of our computers?\nQ: What do we have to do to use your micropatch for this vulnerability?\nA: Create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com. Our micropatch will be downloaded and applied automatically. For information about central management, multi-user role-based support, and other enterprise features, please contact sales@0patch.com.\nQ: If we use your micropatch, what will happen if/when Microsoft provides their own patch for this issue?\nA: 0patch co-exists nicely with official vendor updates because our patches are only applied in memory without changing original executable files. When Microsoft provides their own patch, they will replace various DLLs and EXEs, including the one in which our micropatch is getting applied. This will automatically ensure that our micropatch stops getting applied. In other words, you won't have to do anything in addition to installing Windows Updates to stop using our micropatch and start using Microsoft's patch.\nQ: Is 0patch providing any other security patches?\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "34671da5-189b-4ad5-b728-597c72f18e4d",
                "hash": "50bdb41240cc439fda0d8db7754464b90b764d55155aae1606c95c33cd11e33a",
                "title": "Micropatches Released For Microsoft Windows XAML diagnostics API Elevation of Privilege (CVE-2023-36003)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2024/02/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2024/02/micropatches-released-for-microsoft.html",
                "content": "December 2023 Windows Updates brought a patch for CVE-2023-36003, a privilege escalation vulnerability in Microsoft Windows XAML diagnostics API. The vulnerability allows a low-privileged Windows process to execute arbitrary code in a higher-privileged process running in the same user session, and is therefore useful for elevating from a non-admin to admin user.\nSecurity researcher Michael Maltsev, who found this vulnerability and reported it to Microsoft in July 2023, wrote a detailed article and published a POC. These allowed us to reproduce the issue and create a micropatch for users of legacy Windows systems, which are no longer receiving security updates from Microsoft.\nOur Micropatch\nAs Michael has already noted, there were two changes in the December version of Windows.UI.Xaml.dll, but only one seems to be related to this issue: namely the one that sets the security descriptor of the process's XAML diagnostics API interface to the current process's integrity level. Consequently, only processes that have at least the same integrity level as the target process will be allowed to utilize the affected functionality (and have arbitrary code executed in the target process).\nOur micropatch is functionally identical to Microsoft's.\nLet's see our micropatch in action. A local unprivileged user launches the POC, which periodically attempts to locate a privileged process to sent the offensive XAML diagnostics request to. Another process (Windows Magnifier) is then launched as administrator; the POC quickly finds it and requests that it loads a malicious DLL that then spawns a new command window - as Administrator. This demonstrates that arbitrary code could be executed in the privileged process. With 0patch enabled, the POC fails to attack the privileged process as our patch makes sure that only high-integrity processes could send XAML diagnostics requests to the high-integrity process (Magnifier).\nNote that in a real attack, the attacker would actually be malware silently running in the background, waiting for the user to launch another process with higher privileges and then attacking that process.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 11 v21H1 - fully updated\n- Windows 10 v21H1 - fully updated\n- Windows 10 v20H2 - fully updated\n- Windows 10 v2004 - fully updated\n- Windows 10 v1909 - fully updated\n- Windows 10 v1809 - fully updated\n- Windows 10 v1803 - fully updated\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Michael Maltsev for sharing their analysis, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "f9cf0d62-ac04-4083-9647-1e9da682d364",
                "hash": "920a3d6fdece9cb50db96abc16ec4c07d7069603e1bef034099228353e27d616",
                "title": "Micropatches Released For Microsoft WordPad Information Disclosure (CVE-2023-36563)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2023/11/micropatches-released-for-microsoft.html",
                "content": "October 2023 Windows Updates brought a patch for CVE-2023-36563, an \"Information Disclosure\" vulnerability in WordPad that was found by Microsoft Threat Intelligence as being exploited in the wild. A better name for this vulnerability would be \"Coerced authentication\" or \"Forced authentication\", as it falls in the same class of vulnerabilities as various similar issues that we've patched before.\nIn any case, the vulnerability allows an attacker to create a Rich Text Format (RTF) document which, when opened by the victim in WordPad*, sends user's NTLM hash to attacker's server - where the attacker can receive it and send it to some other NTLM-enabled service in victim's network to impersonate the victim.\n(* WordPad is the default application for RTF files when Office is not installed.)\nWhile WordPad warns the user that the document contains potentially harmful remote content, and the user can choose to block such content, WordPad sends out user's NTLM hash before showing this warning - which is a bit out of order, so to speak.\nThe Vulnerability and the Official Patch\nTwo weeks later, security researcher Dillon Franke publish their reverse engineering analysis of this vulnerability. In this article, Dillon describes reverse engineering Microsoft's patch and tracing back to the vulnerability. They not only discovered what the issue was but also that Microsoft created new Windows API functions to fix it: the underlying problem turned out to be systemic, namely that simply initializing an OLE object could result in Windows trying to authenticate to a remote server without any way for the initializing application - or its user - to decide whether they were okay with that. Microsoft therefore created new functions that included this functionality using \"callback functions\", and fixed WordPad by using these new functions instead of the old ones.\nOur Micropatch\nAs for our patching this issue, we really didn't want to implement new functions in ole32.dll because our thing is, you know, MICROpatching.\nInstead, we decided to do something different, something that we thing WordPad should have been doing for years now: we implemented Mark-of-the-Web checking in WordPad.\nMark-of-the-Web (MotW) is a flag that gets set by all major web browsers and mail clients on Windows on all files that originate from the Internet, and allows applications opening such files to alert the user about opening a potentially harmful document. Most major document-handling applications on Windows check the MotW and do something about it, but WordPad never got this feature.\nWe decided that implementing a MotW check in WordPad would not only provide effectively identical level of protection against the issue at hand as Microsoft's patch, but would also show users a security alert for any other malicious document originating from the Internet. We consider this a good thing.\nLet's see our micropatch in action. On the left side of the screen is the victim's computer, vulnerable to CVE-2023-36563, where the user is about to open attacker's RTF document. On the right side is the attacker's server running a tool that is waiting to collect user's NTLM hash. Without 0patch, opening the RTF document results in attacker's server receiving user's NTLM hash even before WordPad shows the security warning. With 0patch, a new \"Mark-of-the-Web\" warning is shown to the user upon opening the document, and if the user decides not to proceed with opening the document, no NTLM hash is sent to attacker's server.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with years 1, 2 or 3 of ESU)\n- Windows Server 2008 R2 (without ESU, with years 1, 2 or 3 of ESU)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Dillon Franke for sharing their analysis, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "762fa807-dd96-40d9-a834-a84146ab6a11",
                "hash": "2d045ca7521515be6c588ce5238a3cebfc5342a8b83280d27700939fb658695b",
                "title": "Micropatches Released For Microsoft Office Security Feature Bypass (CVE-2023-33150) - Plus a Small 0day",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2023/10/micropatches-released-for-microsoft.html",
                "content": "In July 2023, Microsoft released a patch for CVE-2023-33150, a vulnerability in Microsoft Office that allowed an attacker to create a malicious Word document which would not open in Protected View even though it had the Mark-of-the-Web (\"MotW\") set.\nThe first public detail about this vulnerability came from security researcher Eduardo B. Prado, noting that adding a non-breaking space character to the end of a Word document's extension prevents Word from opening the document in Protected View.\nSubsequently, Will Dormann published his own research. Will noticed that in the process of opening a file with a non-breaking space in the extension, Word at some point - after normalizing the file path - tried to find the Mark-of-the-Web in a file without the non-breaking space, and failed because no such file existed. Using a flawed logic \"no file, no Mark-of-the-Web\", Word then decided that it was safe to open the document without Protected View.\nTo illustrate the issue, suppose a downloaded malicious file with Mark-of-the-Web is named PoC.doc, whereby  denotes a non-breaking space. (One can create such file manually by editing the name of the file, placing the cursor at the end of the file name, holding down Alt and typing 255 on the numeric keypad.) Opening such file in Word would lead to Word normalizing the file name at some point (which removes the non-breaking space), and trying to read Mark-of-the-Web from PoC.doc. Since this file does not exist, Word would assume there was no Mark-of-the-Web, even though this mark existed on the malicious file. Believing there was no Mark-of-the-Web, Word would open the file without Protected View.\nMicrosoft's patch fixed this flawed logic: fully updated Word now still tries to open the file without the trailing non-breaking space, still fails (of course, such file is not there), but then defaults to \"Mark-of-the-Web is present\" and opens the document in Protected View.\nThe following video demonstrates the vulnerability on fully updated Office 2013, and shows that 0patch removes it. A PoC.doc file on the desktop has the Mark-of-the-Web and also has a non-breaking space appended to the end of the file name. Opening such file doesn't automatically launch Word, because this exact file extension is not associated with any application, but Windows very friendly offer Microsoft Word as the most likely candidate for opening the file. Word then opens this file without Protected View. With 0patch enabled, opening the same file results in the file being opened in Protected View.\nSince users of Office 2010 and 2013 didn't receive Microsoft's patch for this issue, we created our own micropatches for these versions that fix CVE-2023-33150. All PRO and Enterprise users had these patches automatically applied without even having to relaunch Word.\nAnd now, the 0day....\nWhile working on the above vulnerability and its patch, our researchers noticed something strange in the patched version of Word. While Microsoft's patch for CVE-2023-33150 changed the flawed logic of \"no file, no Mark-of-the-Web\" to a more secure \"no file, yes Mark-of-the-Web\", the underlying assumption in both cases was that there was no file.\nIn our tests, while frequently moving, copying and renaming files, fully patched Word sometimes behaved strangely, seemingly randomly not opening the file in Protected View when it should have. It turned out there is another flaw in the other half of the above logic: the half where a file without the non-breaking space at the end happens to exist.\nWhat happens in that case? Well, Word tries to read the Mark-of-the-Web from it and uses it for deciding whether to open the file in Protected View or not.\nSuppose we have, like before, a malicious file with the Mark-of-the-Web named PoC.doc: a fully patched Word correctly opens it in Protected View. Suppose we then place another file named PoC.doc next to it without the Mark-of-the-Web and open the first file with Word: Word checks PoC.doc for Mark-of-the-Web and, not finding it, opens the malicious file without Protected View.\nIs this a security issue? Let's discuss exploitability.\nCould the attacker who tricked the user into opening a malicious PoC.doc (a file with Mark-of-the-Web) also plant PoC.doc (without Mark-of-the-Web) next to it to make Word open the former without Protected View? If they could, they might as well just plant PoC.doc and have the user open it for the same effect without having to exploit anything.\nAlternatively, could the attacker plant a malicious MeetingMinutes.doc (a file with Mark-of-the-Web) next to a previously existing, legitimate MeetingMinutes.doc (without Mark-of-the-Web) on user's computer? Potentially yes: our best attack scenario is for the user to have downloaded a Word document from an intranet web server, which would end up in the Downloads folder without Mark-of-the-Web. The attacker would then trick the user to open MeetingMinutes.doc from their own web server on the Internet, which would result in Word opening this file from the Downloads folder, but would read the Mark-of-the-Web from the legitimate MeetingMinutes.doc, and decide to open the malicious file without Protected View.\nThis is arguably a pretty far-fetched scenario, and perhaps someone else will think of a better one. With this in mind we reported the issue to Microsoft and expect it to be fixed soon, but did not wait with publication due to very limited exploitability. We did, however, write a micropatch for all supported Word versions (Word 2016, 2019, 2021 and 365) and made it freely available until Microsoft has provided their official fix. Our CVE-2023-33150 patches for Word 2010 and 2013 also fix this vulnerability on these Office versions.The following video demonstrates the vulnerability and how our patch removes it.\nMicropatch Availability\nMicropatches were written for the following versions of Microsoft Office with all available updates installed:\n- Office 2010 (PRO or Enterprise license required)\n- Office 2013 (PRO or Enterprise license required)\n- Office 2016 (free until Microsoft provides an official patch)\n- Office 2019 (free until Microsoft provides an official patch)\n- Office 2021 (free until Microsoft provides an official patch)\n- Office 365 (free until Microsoft provides an official patch)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Eduardo B. Prado and Will Dormann for sharing their knowledge, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "c4341410-5fb8-4a74-b187-e99f668855e5",
                "hash": "591cbd6d2708fc444f4fe4a1b74b11c5ac6dd3819855190fcf6c53d7de1d582a",
                "title": "We Patched CVE-2023-28244 Before It Was Cool",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/we-patched-cve-2023-28244-before-anyone.html",
                "link": "https://blog.0patch.com/2023/11/we-patched-cve-2023-28244-before-anyone.html",
                "content": "How Our Patch For CVE-2022-33647 Fixed CVE-2023-28244 Five Months In Advance\nBy Blaz Satler of 0patch Team\nThe Initial Vulnerability - CVE-2022-33647\nIn September 2022, Microsoft released patches for CVE-2022-33647, a Kerberos vulnerability that allows a MITM (Man-In-The-Middle) attacker to hijack a user's Kerberos ticket and achieve domain privilege escalation. James Forshaw of Google Project Zero was attributed with the discovery of this issue, and shortly after the issue was fixed also published a writeup on the official Project Zero bug tracking page. James also forked a branch of GhostPacks Rubeus tool and added a sample POC (Proof-of-Concept) code that demonstrated this issue in action and allowed users to check if their KDC (Key Distribution Center) was affected.\nTesting revealed that this issue affected all Kerberos versions that have not configured any restrictions for the use of old cryptographic algorithms, specifically RC4-MD4. This algorithm is particularly dangerous as it contains multiple known vulnerabilities, such as using only the first 8 key bytes for encryption and only 40 bits of randomness in session keys. Such security deficiencies could make you wonder why the algorithm is even allowed to be used in Kerberos. Nevertheless, Kerberos allowed its use by default and also didn't seem to mind being downgraded from a stronger protocol to RC4-MD4 mid-session, which was why the POC worked.\nMicrosoft's Patch\nWe analyzed Microsoft's patches for CVE-2022-33647 and the exploit's execution flow. All signs seemed to point to a patch in kdcsvc.dll, specifically in the KerbInitPreferredCryptList function. This function executes when the KDC service starts which is with the start of lsass.exe. Its job is to initialize the PrefferedCryptList (yes, we know, it's a typo in the code too) variable and two other lists with cryptographic algorithms that the KDC will prefer. Microsoft patched this by not including RC4-MD4 and RC4_HMAC_OLD to these lists. At the time this fix seemed sufficient with the only apparent flaw being that it would only come into effect after the system that applied the patch had been restarted.\nOur Micropatch\nOur own patch, in contrast, needed to be able to protect the system from the moment that the user decided to apply it, so we needed to find a better way of blocking these protocols. During the analysis, we stumbled upon the KerbGetEncTypeBitmask function which supplies bit masks of all supported encryption algorithms to other parts of the code. It has the ability to refuse unknown encryption types, so we decided to take a closer look. Upon further investigation, we found that it was invoked on every request to the KDC, so it made for a perfect candidate for patching this exploit in real time (without a reboot). Our patch was injected at the start of this function and checked if the passed cryptographic algorithm was one of the two that Microsoft had blocked; if it was, we simply executed the \"return 0\" command which returns KDC_ERR_ETYPE_NOTSUPP (\"type not supported\"). This had the effect of completely blocking any use of RC4_MD4 and RC4_HMAC_OLD, and our patches were released in October 2022.\nThe New Vulnerability - CVE-2023-28244\n6 months later, Microsoft released a fix for another similar vulnerability CVE-2023-28244, acknowledging John Askew with Terrapin Labs as the discoverer. Subsequently John also published a POC on GitHub which seemed eerily similar to James' POC for CVE-2022-33647. Our tests revealed that this new exploit attacked the same RC4-MD4 encryption algorithm but with a slight modification to the AS-REQ packet. This new exploit included a timestamp encrypted with the user's password inside the AS-REQ, which changed the execution flow in kdcsvc.dll.\nThis modification caused the exploit to bypass Microsoft's patch that had caught its predecessor. Microsoft's patch only changed how a few crypt lists were initialized, but left some relevant global variables like KdcGlobalSupportedEnctypes unchanged. Although there were other checks in place for unsupported encryption types that were executed later, none of them used the patched PrefferedCryptList variable that was stripped of RC4-MD4 and RC4_HMAC_OLD. This again resulted in RC4-MD4 being used for encrypting the session and tickets.\nA Pretty Decent Patch\nThe micropatch we had released for CVE-2022-33647, on the other hand, proved to be remarkably robust, effectively neutralizing the new, modified exploit. It was particularly gratifying to find that Microsoft's fix for the new vulnerability targeted the same function as our original patch (KerbGetEncTypeBitmask), and closely resembled our own patch for this vulnerability: it removed the validation for RC4-MD4 and RC4_HMAC_OLD encryption algorithms within the KerbGetEncTypeBitmask function, returning a '0' as the function's result when these algorithms were passed to it. This behavior is logically equivalent to our patch.\nEffectively, our patch for CVE-2022-33647 fixed CVE-2023-28244 entire 157 days before it was patched by Microsoft.\nLooking for a way to keep using Windows Server 2012 securely, and don't want to purchase expensive Extended Security Updates? Want to protect your legacy Windows 7, Server 2008 R2 machines and Microsoft Office installations with actual security patches that don't even need a computer restart and can get applied or un-applied in seconds? Not objecting to having occasional vulnerabilities fixed before those running still-supported Windows versions? 0patch has your back!\nLearn more about 0patch on our web site, in our Help Center, or contact us at sales@0patch.com for a free trial or demo.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "eef86e95-d1de-48ea-b815-8db912699a18",
                "hash": "010de3f7f9eb52e8cea613fa6c86b7483d64ba99f220b0e38e1311228173a27a",
                "title": "Micropatches Released For Windows Task Scheduler Elevation of Privilege (CVE-2023-21541)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-windows-task.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-windows-task.html",
                "content": "January 2023 Windows Updates brought a fix for CVE-2023-21541, a local privilege elevation in Task Scheduler. The vulnerability was reported to Microsoft by Ben Lincoln of Bishop Fox.\nIn April, Ben published a detailed analysis of this issue, which allowed us to reproduce the issue and create a micropatch for Windows computers that haven't received an official fix from Microsoft.\nThe\nvulnerability is easy to understand: if a scheduled task contains an environment variable in its executable path, expansion of this variable may result in double quotes around the path being lost, which could then lead to the \"unquoted path\" vulnerability.\nOn the other hand, the issue is not so easy to exploit, assuming that the local attacker does not have administrative privileges (why would they need a local privilege elevation vulnerability if they did?). The first condition is that a scheduled task must already exist on the system whose path to the executable contains an environment variable, and the second condition is that the attacker is able to create a malicious executable called program.exe in the root of C: drive. The latter is, by default, only allowed for administrators and system, so the computer would have to be in some custom configuration.\nNevertheless, we decided to patch this, since at least a couple of our users may have both these conditions fulfilled. While\nstill-supported Windows systems have already received the official\nvendor fix for this vulnerability, there are Windows systems out there\nthat aren't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatches for this\nvulnerability, which are available through the 0patch service.\nOur patch is functionally similar to Microsoft's, but in our case applying the patch doesn't require a restart of the Task Scheduler service (while Microsoft's does).\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nThis micropatch has already been distributed to, and applied on, all online 0patch Agents in PRO or Enterprise accounts (unless Enterprise group settings prevent that).\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Ben Lincoln of Bishop Fox for sharing their analysis, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "ae173446-35f4-4ed9-9b22-46735c999f62",
                "hash": "53faa637c58d5469dc3537ce632e5283eec4ffdbe2eeacc155fb3bf870ee2424",
                "title": "0patch Security-Adopts Windows 10 v20H2 to Keep it Running Securely",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/0patch-security-adopts-windows-10-v20h2.html",
                "link": "https://blog.0patch.com/2023/06/0patch-security-adopts-windows-10-v20h2.html",
                "content": "Last month brought the last security updates for Windows 10 version 20H2. What if your organization is still using it and doesn't want to - or can't - upgrade it yet?\nDon't worry, we have previously security-adopted Windows 10 v1803 and v1809, Windows 10 v2004 and v1909, and Windows 10 v21H1.\nNow we're security-adopting version 20H2.If you're running Windows 10 v20H2 in your organization, all you need to do is install 0patch Agent on these computers and register it to an account with PRO or Enterprise subscription, and you'll start receiving critical security patches as soon as we issue them.\nThese micropatches will be included in 0patch PRO and Enterprise licenses along with all other micropatches we're issuing - which means that users protecting their Windows 10 v20H2 with 0patch will also receive our micropatches for \"0day\" vulnerabilities in various products.\nIn order to have our micropatches applied,\nWindows 10 v20H2 will have to have May 2023 Windows Updates (the\nlast official updates for this version) installed.\nWe welcome all interested organizations to contact sales@0patch.com for information about pricing, deployment, or setting up a trial.\nP.S.:\nWe're getting close to Windows Server 2012 end of official support by\nMicrosoft in October 2023. You guessed it, we're going to security-adopt\nthis server as well, in case you're already getting nervous about that.\nThis is a good time for you to start a free 0patch trial, so send an\nemail to sales@0patch.com.\nTo learn more about 0patch, please visit our Help Center.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a8ede230-7533-475c-8a30-6f2cbd752c45",
                "hash": "fd5d593dd1e58b63359395a3e2f998cd02f0b3cdf3989597fc876eaa8074d3ad",
                "title": "New 0patch Central, New Security Features",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/new-0patch-central-new-free-security.html",
                "link": "https://blog.0patch.com/2023/06/new-0patch-central-new-free-security.html",
                "content": 'Dear 0patch friends,\nWe\'re happy to share with you that four new highly asked-for features have been added to 0patch Central:\nMulti-factor Authentication\nYou can now protect your 0patch account with multi-factor authentication (MFA). Use any authenticator app to configure MFA in your user profile and store recovery codes in a safe place in case you lose access to the app. This feature is available in Free, Pro, and Enterprise accounts.\nAuthentication Options\nSelect which authentication methods can be used for logging in to 0patch Central; choose between "Email and Password" and "Single sign-on", and specify whether multi-factor authentication ("MFA") is required for all users in the account. Find this feature under Account -> Security in Enterprise accounts.\nPassword Policy\nSet the password policy for users in your account; users will be forced to change their password upon next login if needed. Find this feature under Account -> Security in Enterprise accounts..\nIP Address Restrictions\nSpecify a set of IP addresses or subnets from which your 0patch Central account can be accessed. This setting does not affect 0patch Agents - they can always sync from anywhere. Find this feature under Account -> Security in Enterprise accounts..\nUpcoming Security-Adoption of Windows Server 2012\nIn the spirit of supporting legacy Windows versions and Microsoft products, we\'re happy to announce an upcoming adoption of Windows Server 2012, which goes out of official support in October 2023. If you\'re using Windows Server 2012 and would like to keep doing so securely, contact us at sales@0patch.com.\nAre your friends or peers operating Windows systems? Do them a favor and tell them about 0patch.\nThank you!\nYour 0patch Team\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "4b9a3a75-9dcb-49c6-a30e-227f3c668e94",
                "hash": "ccb5175dd65dbaab79ff6ca35d7c36a31498fd86838e6af66a06c953bf5f0671",
                "title": "Micropatches Released For Windows Search Remote Code Execution (CVE-2023-36884)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/09/micropatches-released-for-windows.html",
                "link": "https://blog.0patch.com/2023/09/micropatches-released-for-windows.html",
                "content": "Alongside July 2023 Windows Updates, Microsoft revealed the existence of a 0day that was detected in the wild and assigned it CVE-2023-36884. Without issuing a patch, they titled their original advisory \"Office and Windows HTML RCE vulnerability\" as exploitation was performed using malicious Word documents, and provided workarounds that could block exploitation.\nVery little information was publicly available and exploit samples that were referenced by those who claimed to be in the know seemed convoluted, comprising numerous exploits of old known vulnerabilities. The main source of useful information was security researcher Will Dormann who invested a great deal of effort in publicly dissecting many of these samples and reviewing numerous sources to meticulously separate the wheat from the chaff (see his super long Twitter thread).\nIn absence of sufficient information on the vulnerability itself, we initially decided to issue a patch that implemented one of the most effective workarounds recommended by Microsoft - the FEATURE_BLOCK_CROSS_PROTOCOL_FILE_NAVIGATION mitigation for all Office executables. This patch - free for everyone as the issue was still an unpatched 0day - enabled said workaround on all 0patch customers' computers so they didn't have to do that manually (or even know about this 0day).\nThe Official Patch\nIn August, Microsoft finally provided a patch for CVE-2023-36884, and updated their advisory to reveal that the issue lied in Microsoft Search and that \"An attacker can plant a malicious file evading Mark of the Web (MOTW) defenses which can result in code execution on the victim system.\"\nThis, combined with Will's analysis of the changed behavior in Windows ZIP file extraction (mostly the latter, really), led us to conclusion that Microsoft's patch for CVE-2023-36884 was focused on randomizing the temporary path where files from a ZIP archive are extracted. Before the August update, a file.txt file opened directly from an archive.zip ZIP file would be extracted to a location like:\nC:\\Users\\username\\AppData\\Local\\Temp\\Temp1_archive.zip\\file.txt\nFor a local exploit script running on user's computer this is a predictable location, and if extraction process was terminated by exploit code at the right time, Windows would not put the Mark of the Web (MotW) on the file even if the ZIP file came from the Internet and should not be trusted. The absence of this mark on the extracted file would later result in no security warning when the file was opened. (In the actual exploit, the extracted file would be an executable launched without any warning.)\nAfter the August Windows Update, file extraction was different. The same file would be extracted to this location:\nC:\\Users\\username\\AppData\\Local\\Temp\\Temp1710d72f-7438-40d0-be9b-52f7e0651fe9_archive.zip\\file.txt\nWhereby the added GUID part is random and different each time. This blocks exploitation because the exploit code cannot guess the correct path of the extracted file and can therefore not launch it.\nWe located Microsoft's patch that introduced this change in zipfldr.dll, inside the CTempFileNameArray::_TryCreatingInPath function.\nOur Micropatch\nOur micropatch is logically identical to Microsoft's, and produces the same behavior with extracted files.\nPATCH_ID 1487\nPATCH_FORMAT_VER 2\nVULN_ID 7772\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x18514\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 5\nPIT zipfldr.dll!0x180a0,zipfldr.dll!0x186ad,rpcrt4.dll!UuidCreate,rpcrt4.dll!RpcStringFreeW,rpcrt4.dll!UuidToStringW\n;zipfldr.dll!0x180a0 __int16 *ConstructString(HINSTANCE, unsigned int, ...)\n;zipfldr.dll!0x186ad ErrorBlock\ncode_start\nsub rsp, 0x50 ;Create shadowspace and 2 variables\nmov [rsp+0x48], rcx ;Save rcx\nmov [rsp+0x40], rdx ;Save rdx\nmov [rsp+0x38], r9 ;Save r9\nlea rcx, [rsp+0x28] ;Move var1 to rcx to receive UUID\ncall PIT_UuidCreate ;Call UuidCreate\ncmp eax, 0 ;Check if call succeeded\njne ERROR ;Jump to error block if result != 0\nlea rdx, [rsp+0x20] ;Move var2 to rdx to receive pointer to UUID_STRING\nlea rcx, [rsp+0x28] ;Move var1 with UUID to rdx\ncall PIT_UuidToStringW ;Call UuidToStringW to convert UUID on var1 to UUID_STRING and move it to var2\ncmp eax, 0 ;Check if the call succeeded\njne ERROR ;Jump to error block if result != 0\nmov rcx, [rsp+0x48] ;Restore rcx\nmov rdx, [rsp+0x40] ;Restore rdx\nmov r9, [rsp+0x38] ;Restore r9\nmov r8, [rsp+0x20] ;Replace r8 with UUID_STRING from var2\ncall PIT_0x180a0 ;Call ConstructString that output a full path pointer to rax\nmov qword[rsp+0x38], rax ;save rax for later\nlea rcx, [rsp+0x20] ;Get the pointer to UUID_STRING from var2 and move it to rcx\ncall PIT_RpcStringFreeW ;Free the UUID_STRING buffer\nmov rax, [rsp+0x38] ;Restore rax we saved earlier\njmp END ;Continue normal execution\nERROR: ;Error block\nadd rsp, 0x50 ;Restore the stack pointer\njmp PIT_0x186ad ;Jump to the error block\nEND: ;Normal execution\nadd rsp, 0x50 ;Restore stack pointer\ncode_end\npatchlet_end\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, 2 and 3)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, 2 and 3)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Will Dormann for his extensive analysis of exploit samples, related publications, and Microsoft's patch, which made it possible for us to create a micropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "1609edc8-93ca-44f4-93f6-dfe0ff4cd9c5",
                "hash": "5f3b20abfc1882db5c528beb6f97ece460bfbd11b934f8909083de1534223b11",
                "title": "Three More Years of Critical Security Patches for Windows Server 2012 and Windows Server 2012 R2",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/08/three-more-years-of-critical-security.html",
                "link": "https://blog.0patch.com/2023/08/three-more-years-of-critical-security.html",
                "content": "Can't upgrade your Windows Server 2012 to a newer windows server? No problem.\nAs an on-premises Windows Server 2012 user, you probably know that Microsoft plans to end its support this October. This means no more Windows updates, including security fixes, and the chilling prospect of your servers becoming progressively vulnerable as new security issues are inevitably going to be discovered.\nIf you're lucky enough to be an \"eligible customer with Software Assurance under an Enterprise Agreement\", you will be able to purchase up to 3 years of Extended Security Updates (ESU) from Microsoft for an annual cost equal to \"100% of full license price annually\".\nThose of you who aren't eligible or have other reasons not to purchase ESU, but want to keep using your servers securely - we have good news for you!\nRemember Windows Server 2008 R2 going out of support more than three years ago? Well, we security-adopted it and have thousands of customers still running this server securely with our security patches today. Meanwhile, the three-year ESU period for Server 2008 has already ended for on-premises servers, and we committed to continuing our support for at least two more years.\nNow we'll do the same for Windows Server 2012 and Windows Server 2012 R2, starting with three years of critical security patches that will last until October 2026. In contrast to Windows Server 2008 where we only security-adopted the R2 version, we're seeing a sufficient interest in non-R2 version of Server 2012 to add it to the list of our security-adopted products.\nIf you're new to 0patch and our security patches, we have a lot of information in our Help Center but here's a quick overview:\n- 0patch provides critical security patches for vulnerabilities that are likely to be exploited.\n- Our tiny patches (usually just a few CPU instructions) get applied in memory of running processes; we don't change original executable files.\n- Patches get applied and un-applied instantly, without restarting the computer.\n- Apart from critical security patches for vulnerabilities Microsoft will patch on still-supported Windows versions, you will also get our \"0day\" patches for vulnerabilities that don't yet have official security patches.\n- 0patch Central allows for central management of all 0patch Agents.\n- 0patch costs a fraction of the cost of Extended Security Updates. (Consider Pro plan for a single server, and Enterprise plan for multiple servers with central management.)\nTo use 0patch on Windows Server 2012 after October 2023, you will need to:\n- Create a 0patch account if you don't have one yet.\n- Install 0patch Agent on the server and register it to your 0patch account. (See 0patch Agent user manual for instructions on silent deployment and auto-registration in selected group.)\n- Install October 2023 cumulative Windows Update for Windows Server 2012 as soon as possible. (Our patches will be targeting these exact versions of Windows executables. 0patch Agent will work without this update but our patches for EXEs and DLLs modified by October 2023 Windows Update will only work on these latest versions.)\n- Make sure to have a suitable number of licenses in your 0patch account: each computer with a registered 0patch Agent needs one license.\nOctober is getting close - start testing 0patch in your environment now to iron out the wrinkles without too much rush. To start a free trial, create a free account in 0patch Central, then let us know at sales@0patch.com which email you used for that so we can issue a couple of trial licenses to your account.\nFrequently Asked Questions\nQ: How long do you plan to provide critical security patches for Windows Server 2012 after October 2023?\nA: For at least three more years - until October 2026. Depending on the demand, we'll consider an extension.\nQ: How many vulnerabilities have you patched for Windows Server 2008 R2 and Windows 7 since January 2020?\nA: Since January 2020 when we \"security-adopted\" Windows 7 and Windows Server 2008 R2, we have issued patches for 67 critical security issues\non these systems that were at high risk of being exploited. Many of\nthem were later actually confirmed to be exploited in the wild and even\nmore of them became part of various exploit kits that even a low-budget\nattacker could easily use against unpatched systems.\nA:\nOur patches are actual code patches; we add a couple of CPU\ninstructions to the original (vulnerable) executable code to remove the\nvulnerability. Such patches cannot be bypassed, which literally any\nother exploit protection mechanisms - including virtual patches - can be.\nA: We have also security-adopted Microsoft Edge in January 2023, so you'll be able to keep using Edge securely even though it won't get updated by Microsoft anymore. We're also still providing security patches for Internet Explorer, which is still effectively part of the operating system.\nQ: We'd like to see a demo.\nA: Send an email to sales@0patch.com and provide your company name and time zone so we can suggest a couple of dates for the demo.\nQ: We'd like to set up a trial.\nA: Create a free account in 0patch Central, then let us know at sales@0patch.com which email you used for that so we can issue a couple of trial licenses to your account.\nQ: We have more questions about 0patch.A: Our Help Center has a lot of answers but if you can't find yours there, feel free to contact us at sales@0patch.com.\nYep. I'm going with 0patch for my 3 2012R2 servers! They need to hang around for 1-2years. You guys rock.ReplyDelete",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "7f545fb2-2890-4b6e-8ef5-4ca8a2bbead2",
                "hash": "b8e1d5b5eaf7ff0c018d23c6421e8fe1dbdf5dd6c1691879f0e3adbfb744df8c",
                "title": "Micropatches Released For Denial of Service in Microsoft Message Queuing (CVE-2023-28302, CVE-2023-21769)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/07/micropatches-released-for-denial-of.html",
                "link": "https://blog.0patch.com/2023/07/micropatches-released-for-denial-of.html",
                "content": "April 2023 Windows Updates brought fixes for a number of vulnerabilities in Microsoft Message Queuing Service. We first issued patches for the \"Queuejumper\" remote code execution vulnerability (CVE-2023-21554) as its POC became available. Subsequently, we got access to POCs for two additional issues in Microsoft Message Queuing Service: CVE-2023-21769 and CVE-2023-28302, both being remote denial-of-service issues.While still-supported Windows systems have already received the official vendor fix for these vulnerabilities, there are Windows systems out there that aren't receiving security fixes from Microsoft anymore. In order to protect these systems, we have created our own micropatches for these vulnerabilities, which are available through the 0patch service.\nOur\npatches for these issues are similar to Microsoft's. Because the new patch for CVE-2023-28302 is in the same place as our previous patch for CVE-2023-21554, we had to revoke the latter and issue a combined patch for CVE-2023-21554 and CVE-2023-28302. (Which, of course, doesn't require our users to do anything as it all happens automatically.)\nMicropatch Availability\nThese micropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a133703a-703a-4cb9-9adc-cdb07c3501a7",
                "hash": "4694c0ba29bab3c7a4ebec9dd91b5978794c1283f673da800c939ca60f11589a",
                "title": "Micropatches Released For DHCP Server Service Remote Code Execution (CVE-2023-28231)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-dhcp-server.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-dhcp-server.html",
                "content": "April 2023 Windows Updates brought a fix for CVE-2023-28231, a remote code execution vulnerability in DHCP Server service. The vulnerability was reported to Microsoft by security researcher YanZiShuang.\nSubsequently, Numen Cyber published a POC and DarkRelay Security Labs published their analysis, both of which allowed us to reproduce the issue and create a\nmicropatch for Windows computers that haven't received an official fix\nfrom Microsoft.\nWhile\nstill-supported Windows servers have already received an official\nvendor fix for this vulnerability, Windows Server 2008 R2 isn't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatch for this\nvulnerability, which is available through the 0patch service.\nOur patch is logically identical to Microsoft's.\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows Server 2008 R2\nThis micropatch has already been distributed to, and applied on, all online 0patch Agents in PRO or Enterprise accounts (unless Enterprise group settings prevent that).\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Numen Cyber for sharing their POC, and DarkRelay Security Labs for sharing their analysis, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "e4e3305c-3fc4-4987-96c7-2abff5f0c5fd",
                "hash": "31dab16f9b626d312afe7ddce27d7aa1943f3212eb1f589489217ba3aed9875d",
                "title": "Micropatches Released For Windows Error Reporting Service Elevation of Privilege (CVE-2023-36874)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/09/micropatches-released-for-windows-error.html",
                "link": "https://blog.0patch.com/2023/09/micropatches-released-for-windows-error.html",
                "content": "\With July 2023 Windows Updates, Microsoft brought a fix for CVE-2023-36874, a local privilege escalation vulnerability in Windows Error Reporting Service that was found both by Google TAG and CrowdStrike to be exploited in the wild in the previous month.\nWhen security researcher Filip Dragovic released a proof of concept for this issue, we could reproduce it and start working on a patch.\nThe Vulnerability\nIn short, the Windows Error Reporting Service has a number of functions exposed via its RPC interface, so a local process can ask it to submit a chosen error report via function SubmitReport. This function impersonates the calling process' user and at some point launches wermgr.exe, one of the WER executables. Normally, wermgr.exe would be launched from C:\\Windows\\System32\\, but since the service is impersonating the caller (i.e., the attacker), the CreateProcess function honors any symbolic links the caller may have in place. The attacker can, for instance, create a symbolic link mapping C:\\ to an arbitrary location such as C:\\Users\\public\\test , which will be used by the CreateProcess call. Consequently, the WER service would launch C:\\Users\\public\\test\\Windows\\System32\\wermgr.exe, attacker's executable with the same name - and according to the documented behavior of CreateProcess, the executable would be launched with the token of the service (not the impersonation token). In other words: as Local System.\nThe Official Patch\nMicrosoft's fix for this issue was very simple: they effectively disabled the SubmitReport function by immediately returning error \"Not implemented\" (0x80004001). This means that it is no longer possible to submit an error report via RPC - and perhaps this was never really needed anyway.\nOur Micropatch\nOur micropatch is logically identical to Microsoft's, and produces the same behavior.\nMODULE_PATH \"..\\AffectedModules\\wercplsupport.dll_10.0.17134.1967_Win10-1803_32-bit_u2021-05\\wercplsupport.dll\"\nPATCH_ID 1488\nPATCH_FORMAT_VER 2\nVULN_ID 7774\nPLATFORM win32\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x82ac\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\nPIT wercplsupport.dll!0x82eb\ncode_start\nmov eax, 80004001h ; Error code for \"Not Implemented\"\njmp PIT_0x82eb ; Jump directly to end of function\ncode_end\npatchlet_end\nLet's see our micropatch in action. With 0patch disabled, the POC manages to create a new user \"test\" on the computer by launching a fake C:\\Users\\public\\test\\Windows\\System32\\wermgr.exe. With 0patch enabled, the POC fails to do that because wermgr.exe is not being launched from function SubmitReport at all.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Filip Dragovic for sharing their proof of concept, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "fbbf37e6-4bf9-48ea-8b1a-6e9f55826722",
                "hash": "fb79d99bf1f5057bc341f8c438fa37663a6343ca3441aaec6fb0d3e32f0ec77b",
                "title": "Micropatches Released For Two Windows CNG Key Isolation Service Vulnerabilities (CVE-2023-28229, CVE-2023-36906)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/micropatches-released-for-two-windows.html",
                "link": "https://blog.0patch.com/2023/10/micropatches-released-for-two-windows.html",
                "content": "Last month, security researcher @k0shl of Cyber Kunlun published a proof-of-concept for CVE-2023-28229, an elevation of privilege vulnerability in CNG Key Isolation Service. The same POC also demonstrated exploitation of CVE-2023-36906, an information disclosure vulnerability in the same service discovered by the same researcher.\nMicrosoft had previously provided fixes for these issues in April and August 2023, respectively. According to CISA, CVE-2023-28229 was found to be exploited in the wild.\nCVE-2023-28229\nThis bug is a race condition in the Key Isolation service running in lsass.exe that allows an attacker to use already-freed memory inside a structure. Its root cause is flawed critical section management that protects heap-based data structures from concurrent access but for some reason excludes reference counter initializations and updates. When a user spawns many concurrent threads that call SrvCryptCreatePersistedKey and SrvCryptFreeKey, these threads eventually cause the execution of said functions such that a key data structure is freed in one thread but then still used in another thread by calling the structure destructor method from already deallocated vftable.\nMicrosoft patched this bug in April 2023, and their patch included relocating several critical sections over various pieces of code. Our approach to patching this issue was more minimalistic as we only switched two instructions to place the increasing of the reference counter in function SrvAddKeyToList inside the critical section. It was our assessment that this very instruction was the most critical enabler of exploitability.\nDuring the analysis, we also noticed that this bug doesn't affect Windows 7 and Server 2008 R2 systems as the relevant code in keyiso.dll is completely different there and does not use critical sections in the same way as in newer versions of Windows.\nSource code of our patch:\nMODULE_PATH \"..\\AffectedModules\\keyiso.dll_10.0.19041.388_Win10-2004_64-bit_u2021-12\\keyiso.dll\"\nPATCH_ID 1509\nPATCH_FORMAT_VER 2\nVULN_ID 7723\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x2d2f\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 16 ; remove these two instructions\nPIT ntdll.dll!RtlLeaveCriticalSection\ncode_start\nlock inc dword[rdi+0x8] ; and re-add them in the reverse order\ncall PIT_RtlLeaveCriticalSection\ncode_end\npatchlet_end\nCVE-2023-36906\nThis information disclosure issue stems from the way the Key Isolation Service implements SetProviderProperty and GetProviderProperty functions. When calling SetProviderProperty, the attacker can specify a string of some length, but can then request its value using GetProviderProperty specifying a larger length.When this happens, the Key Isolation Service reads the referenced buffer without any additional checks and reveals the content of memory beyond the designated buffer. This allowed the POC to obtain an internal object address, which it can then use to exploit CVE-2023-28229 in a more reliable way.\nMicrosoft's patch for this issue added a forced zero-termination of the user-supplied string such that subsequent reading from the buffer could not extract information beyond the bounds of the buffer.\nWe chose a similar but more minimalistic approach by setting the HEAP_ZERO_MEMORY flag to the RtlAllocateHeap call, causing the allocated space to be initialized with zeroes.\nMODULE_PATH \"..\\AffectedModules\\ncryptprov.dll_10.0.19041.2193_Win10-21H1_64-bit_u2022-12\\ncryptprov.dll\"\nPATCH_ID 1519\nPATCH_FORMAT_VER 2\nVULN_ID 7795\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x6bf6\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\ncode_start\nadd r8, 0x2 ; increase the size of the allocated buffer\nmov edx, 0x8 ; set the HEAP_ZERO_MEMORY flag for the upcoming\n; RtlAllocateHeap call\ncode_end\npatchlet_end\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v20H2\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank @k0shl of Cyber Kunlun for sharing their proof of concept, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "07fd1242-e418-4382-8e00-695286a857f3",
                "hash": "bef31dace3e5d1aa2a49652a416e3898c868e360891ce6fbababbfd8fc08025a",
                "title": "0patch Security-Adopts Windows 11 v21H2 Home and Pro to Keep it Running Securely",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/10/0patch-security-adopts-windows-11-v21h2.html",
                "link": "https://blog.0patch.com/2023/10/0patch-security-adopts-windows-11-v21h2.html",
                "content": 'This October brought the last security updates for Windows 11 version 21H2 Home and Pro versions. Windows 11 require a Trusted Platform Module (TPM) 2.0 to be present on the computer, but for some time, it was possible to install Windows 11 version 21H2 without TPM. Many users have done that and now that this version went out of support, they cannot upgrade to Windows 11 v22H2, and thus cannot receive future security fixes. While many modern CPU versions are supported by Windows 11, computers with unsupported CPU versions are still happily doing their work in large numbers around the World.\nTo keep these computers secure, we security-adopted Windows 11 v21H2 and will provide critical security patches for it from this month on, for at least one year (and longer if there is sufficient demand).\nWe have previously security-adopted many other Windows versions, including Windows Server 2012, which has also reached its end of support this month.\nThese micropatches will be included in 0patch PRO and Enterprise licenses along with all other micropatches we\'re issuing - which means that users protecting their Windows 11 v21H2 with 0patch will also receive our micropatches for "0day" vulnerabilities in various products.\nWe welcome all interested organizations to contact sales@0patch.com for information about pricing, deployment, or setting up a trial.To learn more about 0patch, please visit our Help Center.\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "13158fc3-f69e-4ade-bc6e-d83780839a69",
                "hash": "1bf512419472f72dbdadfc0413bbf53ef5e380c8f32cc21754d1c6ea7f6ea458",
                "title": "Micropatches Released For Remote Code Execution in Windows OLE (CVE-2023-29325)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/06/micropatches-released-for-remote-code.html",
                "link": "https://blog.0patch.com/2023/06/micropatches-released-for-remote-code.html",
                "content": "May 2023 Windows Updates brought a fix for CVE-2023-29325, a remote code execution vulnerability in Microsoft OLE (Object Linking and Embedding). The vulnerability was reported to Microsoft by Will Dormann with Vul Labs.\nWill found that two of the many COM objects installed on every Windows system by default merely have to be referenced by their respective CLSIDs in a rich text email for Outlook to experience an access violation exception.\nThere is almost no public information on what these two COM objects were intended to do on a Windows system, but since Microsoft's fix was to block them, they probably aren't essential to any important operation. While Microsoft appears to have blocked these offensive/vulnerable COM objects via COM activation filter, they provided no remedy for unsupported Windows versions such as Windows 7 or older Windows 10. Furthermore, still-supported Office versions were also patched to prevent usage of these two COM objects, but older versions like 2010 or 2013 weren't.\nFor our users of older Office versions on older Windows systems we therefore had to create a patch of our own.\nOur\npatch does effectively the same as Microsoft's does on still-supported Office versions: if a COM object is referenced with one of the \"offending\" CLSIDs, object activation is prevented and instead of instantiating such object, Office just writes out the CLSID and the associated DLL name.\nMicropatch Availability\nOur micropatch was written for the following security-adopted versions of Office with all available updates installed:\n- Office 2010\n- Office 2013\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Will Dormann for sharing vulnerability details, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "bee9366d-aace-470d-b898-972d46553a33",
                "hash": "4956144c723a27214cad73ece8aff862859787bb5d0de92cf99a56bc5cde5984",
                "title": 'Micropatches Released For "QueueJumper" Remote Code Execution in Microsoft Message Queuing (CVE-2023-21554)',
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/05/micropatches-released-for-queuejumper.html",
                "link": "https://blog.0patch.com/2023/05/micropatches-released-for-queuejumper.html",
                "content": "April 2023 Windows Updates brought a fix for CVE-2023-21554, a remote code execution vulnerability in Microsoft Message Queuing Service. The vulnerability, nicknamed \"QueueJumper\" was reported to Microsoft by Wayne Low of Fortinet's FortiGuard Lab and Haifei Li with Check Point Research.\nThe first proof-of-concept became available on April 30, when Omair from Krash Consulting published it on GitHub. Another proof-of-concept by zoemurmure became available on May 18. Both of these made it possible for us to create a micropatch for this issue.\nThe\nvulnerability allows a remote unauthenticated attacker to cause memory corruption on a Windows computer running Microsoft Message Queuing Service, which can often be extended to executing arbitrary code on the computer. A detailed technical analysis (in Chinese) was provided by zoemurmure,\nOur patch prevents memory corruption in a similar way as Microsoft's. In this rare case, the vulnerable service must be restarted on Windows 10 in order for our patch to get applied because it employs the \"arbitrary code execution\" exploit mitigation that interferes with our operations. Mind you, Microsoft's patch requires a computer restart, but 0patch micropatches typically get applied without even relaunching vulnerable processes. This is not the case here, so make sure to restart the MSMQ service.\nLet's see our micropatch in action. With 0patch\ndisabled, the POC immediately crashes the Microsoft Message Queuing Service. With\n0patch enabled, the attack doesn't work anymore because the invalid packet is detected and blocked by our patch.\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v21H1\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Omair from Krash Consulting and zoemurmure for sharing their POCs, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "a3f0ca62-d03f-401e-b452-6ac902d512ef",
                "hash": "c29b17ca2b9b813e833e2466871bd5788ff5124dadafa2ca1a3cfe37b70c66db",
                "title": "Micropatches for Local Privilege Escalation in Microsoft Installer (CVE-2023-21800)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/04/micropatches-for-local-privilege.html",
                "link": "https://blog.0patch.com/2023/04/micropatches-for-local-privilege.html",
                "content": "February 2023 Windows Updates brought a fix for CVE-2023-21800,\na vulnerability in Windows Installer that allows a local low-privileged attacker to run their code as Local System. The\nvulnerability was reported to Microsoft by Adrian Denkiewicz with Doyensec. Adrian subsequently wrote an article detailing the vulnerability, which allowed us to reproduce it and create a patch for our users.\nThe vulnerability is in one sense a typical symbolic link issue, the types of which we've been seeing in abundance in the past years, but it is also interesting because it includes a privileged process (msiexec.exe running as Local System) inheriting environment variables from the attacker's parent process. This is something we haven't seen before and it could generally be exploited in different interesting ways.\nAdrian decided to exploit it by redefining the PROGRAMDATA environment variable and thereby \"redirect the “All Users” profile to the arbitrary location which is writable by the [local attacker].\" Installation of a product for all users usually includes creating files in All Users' Start Menu folder - which is normally write-protected against a local non-admin user, but by redirecting this folder to an attacker-controller location allows the attacker to create a symlink there and wait for the installer process to use this symlink. If the symlink points to some system file, this effectively means the installer process (running as Local System) will delete such system file.\nArbitrary file deletion can be turned into arbitrary code execution as Local System, as was first shown by Jonas Lykkegård in 2020 using Windows Error Reporting Service, and subsequently also by Abdelhamid Naceri using Windows Installer.\nWhile\nstill-supported Windows systems have already received an official\nvendor fix for this vulnerability, there are Windows systems out there\nthat aren't receiving security fixes from Microsoft anymore. In order to\nprotect these systems, we have created our own micropatches for this\nvulnerability, which are available through the 0patch service.\nOur patches add a check to the affected code to see if the path used for deleting a file contains a symlink. If it does, the operation is blocked (the file is not deleted).\nMicropatch Availability\nThe micropatch was written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 10 v2004\n- Windows 10 v1909\n- Windows 10 v1809\n- Windows 10 v1803\n- Windows 7 (without ESU, with ESU year 1, and with ESU year 2)\n- Windows Server 2008 R2 (without ESU, with ESU year 1, and with ESU year 2)\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Adrian Denkiewicz with Doyensec for sharing their POC, which allowed us to create a micropatch and protect our users against this attack. We also encourage all security researchers to privately share their analyses with us for micropatching.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "c330165f-ded5-4a8a-b0f3-ddee6eb92d6b",
                "hash": "4fa068a606adb4b8bbfd91b2165dc4528dbe30b76ca0dcd32636dfd5ca554ce6",
                "title": "Free Micropatches For Microsoft Access Forced Authentication Through Firewall (0day)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2023/11/free-micropatches-for-microsoft-access.html",
                "link": "https://blog.0patch.com/2023/11/free-micropatches-for-microsoft-access.html",
                "content": 'Update 2/14/2024: Either January 30 or February 1 Office update brought a fix for this issue: now, Access warns the user for any ODBC connection to SQL Server. Our patch only shows a warning when such connection is made on non-standard ports 80 or 443, because these would carry user\'s NTLM hash through a company firewall, so Microsoft\'s patch might display more - in our view unnecessary - warnings. So what CVE ID did this issue get? Well, it doesn\'t seem to have gotten one: neither January 30 nor February 1 Office update mention any changes in Access, and February Windows Updates also have no suitable match. So far, this issue seems to have been fixed silently. With official patch available, our patches for this issue are no longer FREE and require a PRO or Enterprise license. Our patch was available 66 days before Microsoft\'s.\nOn November 9, 2023, Check Point Research published an article about an "information disclosure" / "forced authentication" vulnerability in Microsoft Access that allows an attacker to obtain the victim\'s NTLM hash by having them open a Microsoft Office document (docx, rtf, accdb, etc.) with an embedded Access database.\nMany similar vulnerabilities have been disclosed in the last few years, all having a common theme of forcing a Windows process to authenticate to attacker\'s server and thereby disclose credentials of Windows user or a privileged service account to the attacker. Microsoft has patched some of them, but decided not to patch others: DFSCoerce, PrinterBug/SpoolSample and PetitPotam still don\'t have an official patch today and our micropatches remain the only patches available for these (our customers who can\'t stop using NTLM really appreciate them). RemotePotato0 was initially experiencing a similar fate but was then silently fixed 9 months after publication. ShadowCoerce was just as silently fixed 6 months after publication. On the other hand, a WordPad vulnerability from this same category, leaking user\'s NTLM hash to a web share upon opening an RTF document, was openly patched by Microsoft just last month.\nIt\'s hard to tell how Microsoft decides whether to patch a forced authentication vulnerability or not - and this one in Microsoft Access just adds to the confusion. Let\'s see how.\nThe Vulnerability\nAs Haifei Li, security researcher at Check Point, describes in their detailed article, a remote SQL Server database link can be inserted to a Microsoft Access database with "Windows NT authentication", which will force such authentication - and leak user\'s NTLM hash - every time the table with such link is refreshed in Access. So far, this would be a "classic" forced authentication issue, only different from most others in the fact that the connection isn\'t established on "classic" SMB and RPC ports but on SQL Server\'s port 1433. Which is expected to be filtered for outbound traffic from internal network towards the Internet.\nBut as Haifei noted, the database link can override the default port and specify an arbitrary port, including 80 or 443 - which are both typically allowed by firewalls for outbound connections so users in the network can browse the Internet. This makes things more interesting, and impact-wise almost comparable to the previously mentioned WordPad issue. Why "almost"? Because it\'s not enough just to open a Word document with such Access database embedded: to force a refresh of the database link, the user has to "open" the linked Access table by clicking on it.\nTo overcome this limitation, Haifei found that the AutoExec macro can be used to automatically open the table and force a refresh. But hey, macros have already been blocked for documents coming from the Internet, so how would this even work?\nWell, we first need to understand something Haifei calls "simple Access macros". Admittedly, we did not know that Access macros come in two flavors, and we couldn\'t find any relevant results on this phrase on the Internet, but that\'s probably because Haifei usually knows more about the targeted product than the Internet does.\n"Simple Access macros" are limited macros that only allow you to perform a set of predefined harmless actions, in contrast to "full-fledged regular macros" (sorry, another unofficial term) that are actual VBScript code capable of doing pretty much anything on the computer, including downloading and executing ransomware. It turned out that simple Access macros are blocked neither by the Access macro policy nor by the Protected View. In addition, if you name such macro AutoExec, it will get executed upon opening the Access database.\nPutting two and two together, Haifei created an Access database with a remote SQL Server database link, Windows NT authentication, and an AutoExec macro that opened the linked table - and embedded that in a Word document because users prefer opening Word documents to Access databases. Now, there is no "almost" there anymore: this issue is impact-wise identical to the WordPad issue.\nCheckpoint reported this vulnerability to Microsoft in January 2023 and were in July still "unable to obtain conclusive answer because the issue is considered as “low/none severity”, according to the MSRC reply." They did notice, however, that at some point during this period, Access started showing this security dialog when opening their PoC file:\nSo, was this issue silently fixed too? Nope, at least not successfully: while the above dialog is certainly triggered by the presence of the AutoExec macro (it shows even when AutoExec is the only active content), closing this informational dialog either by pressing OK or clicking the X still leads to the AutoExec macro being executed and user\'s credentials being sent to attacker\'s server. The only way to block the exploit when this dialog is displayed is to forcefully kill the msaccess.exe process, e.g. using Windows Task Manager.\nIn summary, we have active content that is detected, user informed about it being blocked, and then still getting executed unless the user kills Access with Task Manager. Not ideal.\nOur Analysis\nWe tried to make sense of all this and here\'s what we think happened.\nWe think Microsoft never intended to patch the reported issue due to its "low/none severity" assessment, which we think was wrong because its impact is comparable to the WordPad issue they had patched last month with severity "important".\nWe think the security dialog that started appearing in Access is part of Microsoft\'s slow and painful process of gradually restricting malicious macros while not getting hammered by customers whose Office documents they might break along the way. (See here and here for examples.) Microsoft is doing the right but difficult thing here, addressing a very popular attack avenue, and they deserve huge credit for that.\nWe think that the current macro-blocking logic in Access is flawed: it clearly detects the AutoExec "simple" macro, it tells the user that macros are blocked - but then doesn\'t block it. Microsoft needs to fix this, but it\'s not hard to imagine thousands of enterprises using "simple" macros on a daily basis, and thousands of angry calls to the Office PM the next day if they actually start getting blocked. Still, this needs to be fixed this because it\'s confusing and useless: either don\'t trip on simple macros, or trip on them and block them.\nWe expect Microsoft will do something about this all; they will probably fix the macro logic and the dialog, but will they revise the severity of the issue reported by CheckPoint and fix it too?\nMaybe they will, maybe they won\'t - but we did.\nOur Micropatch\nWe pondered on how to address this: shall we fix Microsoft\'s macro logic so that simple macros will indeed be blocked when the dialog says they would be? If we did, and broke "simple" macros for our users, they would probably blame Microsoft and make angry calls to the surprised Office PM. We don\'t presume we understand the complex dynamics between a huge software vendor who decades ago made a convenient powerful feature that boosted product usability but has since become a major security risk, and organizations that have this feature embedded in critical processes but can at the same time be seriously harmed because of it.\nSo we decided on a different approach: we would block database connections from Access to SQL Server on ports 80 and 443. While it is not impossible for some real, legitimate SQL Server to be accessible on port 80/443 and some real, legitimate Access database being linked to it, we think it\'s realy unlikely. Note that such patch would not block SQL Server connections on port 80/443 from any other client, just Microsoft Access.\n"How about other database servers that could be linked to remotely," you ask, "some of them may also support Windows NT authentication and be accessible on arbitrary port?"\nWell, the main risk is posed by the ones supported on Windows by default, without a non-default ODBC driver having to be installed on user\'s computer. And SQL Server is the only one that fits the bill.\nThis is our micropatch:\nMODULE_PATH "..\\Affected_Modules\\acecore.dll_16.0.16924.20054_64bit_u202311_Office2016_2019_2021_365\\acecore.dll"\nPATCH_ID 1569\nPATCH_FORMAT_VER 2\nVULN_ID 7803\nPLATFORM win64\npatchlet_start\nPATCHLET_ID 1\nPATCHLET_TYPE 2\nPATCHLET_OFFSET 0x1955a0\nN_ORIGINALBYTES 5\nJUMPOVERBYTES 0\nPIT msvcrt.dll!wcsstr,msvcrt.dll!_wtoi,acecore.dll!0x195637,shlwapi.dll!StrStrIW\ncode_start\npush r15 ;save the original r15 value\nsub rsp, 0x28 ;create shadowspace\nlea r15, [rbp+0x60] ;move the connection string pointer to r15\nmov rcx, r15 ;move the connection string pointer to the first argument\ncall STR1 ;get the string "SQL Server" to the stack\ndb __utf16__(\'SQL Server\'),0,0\nSTR1:\npop rdx ;pop the "SQL Server" string pointer from the stack\ncall PIT_StrStrIW ;call case insensetive string search\ncmp rax, 0x0 ;check if SQL Server substring exists\nje SKIP ;if not skip the patch\nLOOP: ;the port searching loop\nmov rcx, r15 ;move the connection string pointer to the first argument\ncall STR2 ;load the "," character onto stack\ndb __utf16__(\',\'),0,0\nSTR2:\npop rdx ;pop the "," character to rdx\ncall PIT_wcsstr ;call wcsstr to search for "," and if found return the addres to rax\ncmp rax, 0x0 ;check if "," was found\nje SKIP ;if no matches, we\'re done\nadd rax, 0x2 ;if match was found increment the pointer to string by 1 char\nmov r15, rax ;move the incremented pointer to r15 for next iteration\nmov rcx, rax ;move the incremented pointer to the first arg\ncall PIT__wtoi ;convert the string after the "," to a number\ncmp rax, 0x50 ;check if that number is 80 (decimal)\nje BLOCK ;if it is, block the connection\ncmp rax, 0x1bb ;check if that number is 443 (decimal)\nje BLOCK ;if it is, block the connection\njmp LOOP ;if nothing was found repeat the search\nBLOCK: ;block the connection\ncall PIT_ExploitBlocked ;popup the Exploit Blocked notification\nadd rsp, 0x28 ;clear shadowspace\npop r15 ;restore the original r15 value\njmp PIT_0x195637 ;jump to the error block\nSKIP: ;skip the patch and continue normal execution\nadd rsp, 0x28 ;clear shadowspace\npop r15 ;restore the original r15 value\ncode_end\npatchlet_end\nLet\'s see our micropatch in action. In the video below we can see attacker\'s computer on the left and user\'s computer on the right. The user is running fully updated Office 365. On attacker\'s computer we can see Wireshark, a network monitoring tool, that is filtered to only show communication with the IP address of user\'s computer.\nFirst, with 0patch disabled, the user opens a malicious Access file in Microsoft Access, and as described above, a security dialog is displayed informing them that active content in the file has been blocked (we know it wasn\'t). As the user closes this dialog, the linked database connection is established with attacker\'s computer on port 80 due to the AutoExec macro being executed.\nNext, with 0patch enabled, the user again opens attacker\'s Access file. This time, as the "blocked active content" security dialog is closed, our patch detects that a connection to a SQL Server is attempted on port 80 and blocks it. It also records an "Exploit blocked" event and shows an alert to the user.\nMicropatch Availability\nMicropatches were written for the following versions of Microsoft Office with all available Updates installed:\n- Office 2010*\n- Office 2013*\n- Office 2016\n- Office 2019\n- Office 2021\n- Office 365\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them. If you\'re using Windows or Office that aren\'t\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won\'t be exploited on your computers. (By the way, still using Windows Server 2012? 0patch has you covered!)\nIf you\'re new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Haifei Li with Check Point for sharing the details of this vulnerability, which made it possible for us to create a\nmicropatch for our users.\nNo comments:\nPost a Comment',
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "00492ba3-e057-4a39-888f-71d018d91dd0",
                "hash": "af70d14cff12f28551b7b376cd2f6924c9a00fc525042c810cddf96598370d17",
                "title": 'The "EventLogCrasher" 0day For Remotely Disabling Windows Event Log, And a Free Micropatch For It',
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2024/01/the-eventlogcrasher-0day-for-remotely.html",
                "link": "https://blog.0patch.com/2024/01/the-eventlogcrasher-0day-for-remotely.html",
                "content": "Update 2/14/2024: February Windows Updates did not patch this issue, so it remains a 0day. We did have to re-issue patches for three Windows versions because the updates changed wevtsvc.dll and patches had to be ported to the new versions.\nUpdate 3/14/2024: March Windows Updates did not patch this issue, so it remains a 0day. We did have to re-issue our patch for Windows Server 2022 because the update changed wevtsvc.dll and our patch had to be ported to the new DLL.\nUpdate 4/10/2024: April Windows Updates did not patch this issue, so it remains a 0day (now 70 days without an official fix).\nIf you ever troubleshooted anything on Windows or investigated a suspicious event, you know that Windows store various types of events in Windows Event Log. An application crashed and you want to know more about it? Launch the Event Viewer and check the Application log. A service behaving strangely? See the System log. A user account got unexpectedly blocked? The Security log may reveal who or what blocked it.\nAll these events are getting stored to various logs through the Windows Event Log service. Unsurprisingly, this service's description says: \"Stopping this service may compromise security and reliability of the system.\"\nThe Windows Event Log service performs many tasks. Not only is it responsible for writing events coming from various source to persistent file-based logs (residing in %SystemRoot%\\System32\\Winevt\\Logs\\), it also provides structured access to these stored events through applications like Event Viewer. Furthermore, this service also performs \"event forwarding\" if you want your events sent to a central log repository like Splunk or Sumo Logic, an intrusion detection system or a SIEM server.\nTherefore, Windows Event Log service plays an important role in many organizations' intrusion detection and forensic capabilities. And by extension, their compliance check boxes.\nThe \"EventLogCrasher\" 0day\n\"That's a nice Event Log service you have here.\nWould be a shame if something happened to it.\"\n- every attacker\nOn January 23, 2024, security researcher Florian published details on a vulnerability that allows any authenticated user in a Windows environment (including in Windows domain) to crash Windows Event Log service either locally or on any remote computer (!)\nAs Florian explained, \"according to MSRC, the bug does not meet the bar for servicing and therefore they allowed me to publish a proof of concept.\" In addition, \"they claimed it was a duplicate of another bug from 2022 (coincidence?) that didn't meet the requirements for servicing.\"\nFlorian's POC (proof of concept) is remarkably simple: it makes a single call to RegisterEventSourceW, which retrieves a handle to an event log on the specified computer. (This function allows an application on computer A to obtain a handle to, say \"Application\" log on computer B, by sending a specific request to computer B's Windows Event Log service.) However, before the request is sent to the target computer, the POC modifies its in-memory structure to confuse the receiving Event Log service. It manages to confuse it so much to cause a null-pointer dereference and crash the service. The attack only takes a second and works reliably.\nThe good news at this point is that Windows Event Log service is set to automatically restart if unexpectedly stopped. The bad news is that it only gets restarted twice, then not anymore. So crashing the Event Log service three times makes it persistently stopped.\nNow, what does this mean? With Windows Event Log service stopped, no events can be written to logs, forwarded to other locations, or read from logs using event logging functions. For all practical purposes, logging has gone dark. And indeed, any Application events, and many other event source's events that occur during the service downtime get irrecoverably lost.\nFortunately, Security and System events don't get lost - at least not yet. Someone was smart enough to expect the possibility of a temporarily unavailable Event Log service and implemented an event queue for these important events. If Windows can't report a Security or System event (perhaps some others too, we did not investigate), they put such event in some internal queue that then periodically retries to log all queued events until they finally succeed. We found no useful information about this queue's implementation or configuration; in fact, the only official mention of this queue we could find was Event 4612(S), described as \"This event is generated when audit queues are filled and events must be discarded. This most commonly occurs when security events are being generated faster than they are being written to disk.\"\nOur tests have shown that such queue in fact exists: if we left the Event Log service stopped and let some Security and System events occur, these events - of course - could not get logged. But after we started the Event Log service, they quickly got logged. Clearly something was storing them and making a real effort to get them logged. This is not really perfect news for the attacker: while security and system events they might trigger would not be logged while the Event Log service was down, they would get logged if the admin subsequently started the service.\nObviously, our next step was to see if the event queue survives a computer restart. Assuming that every Windows computer eventually gets restarted (at least still-supported ones on every second Tuesday), and that an admin noticing problems with logging may also decide to restart the computer, the question was: would queued events get lost?\nAnd the answer was, they do not get lost. Apparently the event queue, presumably in memory, gets stored to disk when the system is gracefully shut down or restarted, and re-read upon startup. Once the Event Log service is running again, the queue is emptied into appropriate logs, with correct time stamps nonetheless.\nWhat about a non-graceful system shutdown or restart? If the attacker manages to cause a blue screen on the computer where events are being stored in the event queue, these events will actually be irrecoverably lost. So there's an unexpected bonus value in ping of death vulnerabilities.\nThe final question was, can Windows firewall or access permissions stop this attack? After all, event-collecting apps such as Sumo Logic require enabling remote event log management-related firewall rules (disabled by default) and adding the remote user to the Event Log Readers group (empty by default). Nope, even though such apps do not work and connecting to a remote Event Log with Event Viewer does not work without such firewall and permissions adjustments, the attack at hand works by default. In fact, the attack takes place over a named pipe (i.e., SMB protocol), and unless you can afford to completely disable SMB - no network shares, no printers, no many other things - we don't believe you can configure Windows to prevent this attack from an attacker in your network.\nSo far we've discovered that a low-privileged attacker can crash the Event Log service both on the local machine and on any other Windows computer in the network they can authenticate to. In a Windows domain, this means all domain computers including domain controllers.\nDuring the service downtime, any detection mechanisms ingesting Windows logs will be blind, allowing the attacker to take time for further attacks - password brute-forcing, exploiting remote services with unreliable exploits that often crash them, or running every attacker's favorite whoami - without being noticed.\nKnowing that the \"dark times\" can soon end when some admin decides to restart machines or start the Event Log service, a clever attacker could simply run the POC in a never-ending loop to make sure that as soon as the Event Log service is back up, it gets crashed again. It would be really difficult for an admin to even know that it was an attacker crashing the service, as we all know computer things often stop working unexpectedly even without malicious assistance.\nKeeping the service down long enough could, after some time, reach the point of saturating the event queue to its limit - at least we assume there's a limit or there wouldn't have been a need for Event 4612(S). Having reached this point, attacker's activities would from there on be irrecoverably un-logged.\nThe Flaw\nAs Florian noted in the POC document, \"the crash occurs in wevtsvc!VerifyUnicodeString when an attacker sends a malformed UNICODE_STRING object to the ElfrRegisterEventSourceW method exposed by the RPC-based EventLog Remoting Protocol.\"\nIndeed, the POC causes the wevtsvc!VerifyUnicodeString function inside the Event Log service to reference a null pointer, which causes an unhandled access violation. This function received a single argument, a pointer to a UNICODE_STRING structure, whereby for some reason, the Buffer element of the structure, which should point to the actual buffer, points to 0. The function doesn't expect that, at least not in the first part of the code, and crashes as shown on the image below. Also on the image, you can see that later in the code there is a check for the pointer being 0 - but too late.\nVulnerable function wevtsvc!VerifyUnicodeString\nOur immediate goal was to provide a patch to our users as quickly as possible, so we haven't investigated further how the UNCODE_STRING structure was created with a null pointer. We plan to do that later, as it may reveal other similar flaws.\nOur Micropatch\nOur patch is simple: we just added a test for null pointer where such test was missing in the original code. The patch therefore consists of just two instructions: a compare operation and a conditional jump. The image below shows our patch (green code blocks) inserted in the original code (white blocks and the blue \"Trampoline\" block).\nOur patch inserted in the original code\nThe following video shows both the POC and our patch in action. On the left side is the target computer, a fully updated Windows Server 2019 acting as domain controller. The firewall rules are in their default configuration, with all three Remote Event Log Management rules disabled, to show that the firewall does not stop the attack. The Event Log service is running and 0patch Agent is initially disabled.\nOn the right side is the attacker's Windows workstation, whereby the attacker is a regular Domain Users member. The attacker launches the POC against the domain controller and immediately crashes the Event Log service.\nThe same test is then repeated with 0patch Agent enabled, which applies our in-memory micropatch to the Event Log service process (of course without restarting the computer). This time, the POC fails to crash the service because our patch detects the presence of a null pointer and makes sure it does not cause a memory access violation.\nMicropatch Availability\nSince\nthis is a \"0day\" vulnerability with no official vendor fix available,\nwe are providing our micropatches for free until such fix becomes\navailable.\nMicropatches were written for:\n- Windows 11 v22H2, v23H2 - fully updated\n- Windows 11 v21H2 - fully updated\n- Windows 10 v22H2 - fully updated\n- Windows 10 v21H2 - fully updated\n- Windows 10 v21H1 - fully updated\n- Windows 10 v20H2 - fully updated\n- Windows 10 v2004 - fully updated\n- Windows 10 v1909 - fully updated\n- Windows 10 v1809 - fully updated\n- Windows 10 v1803 - fully updated\n- Windows 7 - no ESU, ESU1, ESU2, ESU3\n- Windows Server 2022 - fully updated\n- Windows Server 2019 - fully updated\n- Windows Server 2016 - fully updated\n- Windows Server 2012 - no ESU, ESU1\n- Windows Server 2012 R2 - no ESU, ESU1\n- Windows Server 2008 R2 - no ESU, ESU1, ESU2, ESU3, ESU4\nThese micropatches have already been distributed to all online 0patch Agents. If you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com. Everything else will happen automatically. No computer reboot will be needed.\nWe'd like to thank Florian for sharing vulnerability details, which allowed us to reproduce it and create a micropatch. We also encourage all security researchers who want to see their vulnerabilities patched to privately share them with us.\nFrequently Asked Questions\nQ: Which Windows versions are affected?\nA: Currently, ALL Windows versions are affected, from Windows 7 up to the latest Windows 11 and from Server 2008 R2 to Server 2022\nQ: What level of access does the attacker need to exploit this?\nA: The attacker needs network connectivity to the target computer, and be able to authenticate to said computer as any kind of user (even a low-privileged one). Therefore, the attacker can always crash the Event Log service on the local machine, and can crash Event Log service on all Windows computers in the same Windows domain, including on domain controllers.\nQ: Can this be exploited remotely by an attacker via the Internet?\nA:No, the attacker must be able to send SMB requests to the target computer. Internet-facing Windows computers are unlikely to have SMB connectivity open to the Internet, and Windows computers in local networks even less so. The attacker must therefore already be in the local network.\nQ: Is there any way to mitigate this attack with Windows configuration?\nA: Short of denying SMB connectivity to the target computer (which would disable file and printer sharing, and various RPC-based mechanisms), we're not aware of any way to mitigate the attack.\nQ: Doesn't Windows Firewall block this attack? After all, there are three pre-defined firewall rules for allowing Remote Event Log Management, which need to be manually enabled to allow remote event log management.\nA: While these firewall rules indeed need to be enabled to allow remote event log management, this attack works regardless. Again, it works in the default Windows Firewall configuration.\nQ: Does this vulnerability affect our IDS/SIEM?\nA: It does if your IDS/SIEM is collecting Windows event logs. If the attacker crashes the Event Log service on a computer, that computer won't be able to forward events to such IDS/SIEM. Any alerts that may be triggered based on Windows events will not be triggered during this time.\nQ: Are events occurring during the Event Log service downtime irrecoverably lost?\nA: Events generated by sources that don't use event queuing are irrecoverably lost - this includes Application logs (including events about Event Log service crashing). Security and System events are queued in memory and can get stored to the event log later when Event Log service becomes available again. Queued events can get irrecoverably lost in case the computer ungracefully shots down (e.g., due to a blue screen or power-off), or if the queue gets full. Unfortunately we don't know how many events the queue can hold.\nQ: What should we do if we suspect someone crashed the Event Log service on one of our computers?\nQ: What do we have to do to use your micropatch for this vulnerability?\nA: Create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com. Our micropatch will be downloaded and applied automatically. For information about central management, multi-user role-based support, and other enterprise features, please contact sales@0patch.com.\nQ: If we use your micropatch, what will happen if/when Microsoft provides their own patch for this issue?\nA: 0patch co-exists nicely with official vendor updates because our patches are only applied in memory without changing original executable files. When Microsoft provides their own patch, they will replace various DLLs and EXEs, including the one in which our micropatch is getting applied. This will automatically ensure that our micropatch stops getting applied. In other words, you won't have to do anything in addition to installing Windows Updates to stop using our micropatch and start using Microsoft's patch.\nQ: Is 0patch providing any other security patches?\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
            {
                "id": "34671da5-189b-4ad5-b728-597c72f18e4d",
                "hash": "50bdb41240cc439fda0d8db7754464b90b764d55155aae1606c95c33cd11e33a",
                "title": "Micropatches Released For Microsoft Windows XAML diagnostics API Elevation of Privilege (CVE-2023-36003)",
                "review": "",
                "author": "Mitja Kolsek",
                "source": "https://blog.0patch.com/2024/02/micropatches-released-for-microsoft.html",
                "link": "https://blog.0patch.com/2024/02/micropatches-released-for-microsoft.html",
                "content": "December 2023 Windows Updates brought a patch for CVE-2023-36003, a privilege escalation vulnerability in Microsoft Windows XAML diagnostics API. The vulnerability allows a low-privileged Windows process to execute arbitrary code in a higher-privileged process running in the same user session, and is therefore useful for elevating from a non-admin to admin user.\nSecurity researcher Michael Maltsev, who found this vulnerability and reported it to Microsoft in July 2023, wrote a detailed article and published a POC. These allowed us to reproduce the issue and create a micropatch for users of legacy Windows systems, which are no longer receiving security updates from Microsoft.\nOur Micropatch\nAs Michael has already noted, there were two changes in the December version of Windows.UI.Xaml.dll, but only one seems to be related to this issue: namely the one that sets the security descriptor of the process's XAML diagnostics API interface to the current process's integrity level. Consequently, only processes that have at least the same integrity level as the target process will be allowed to utilize the affected functionality (and have arbitrary code executed in the target process).\nOur micropatch is functionally identical to Microsoft's.\nLet's see our micropatch in action. A local unprivileged user launches the POC, which periodically attempts to locate a privileged process to sent the offensive XAML diagnostics request to. Another process (Windows Magnifier) is then launched as administrator; the POC quickly finds it and requests that it loads a malicious DLL that then spawns a new command window - as Administrator. This demonstrates that arbitrary code could be executed in the privileged process. With 0patch enabled, the POC fails to attack the privileged process as our patch makes sure that only high-integrity processes could send XAML diagnostics requests to the high-integrity process (Magnifier).\nNote that in a real attack, the attacker would actually be malware silently running in the background, waiting for the user to launch another process with higher privileges and then attacking that process.\nMicropatch Availability\nMicropatches were written for the following security-adopted versions of Windows with all available Windows Updates installed:\n- Windows 11 v21H1 - fully updated\n- Windows 10 v21H1 - fully updated\n- Windows 10 v20H2 - fully updated\n- Windows 10 v2004 - fully updated\n- Windows 10 v1909 - fully updated\n- Windows 10 v1809 - fully updated\n- Windows 10 v1803 - fully updated\nVulnerabilities like this one get discovered on a regular basis, and\nattackers know about them all. If you're using Windows that aren't\nreceiving official security updates anymore, 0patch will make sure these\nvulnerabilities won't be exploited on your computers - and you won't\neven have to know or care about these things.\nIf you're new to 0patch, create a free account in 0patch Central, then install and register 0patch Agent from 0patch.com, and email sales@0patch.com for a trial. Everything else will happen automatically. No computer reboot will be needed.\nWe would like to thank Michael Maltsev for sharing their analysis, which made it possible for us to create a\nmicropatch for this issue.\nNo comments:\nPost a Comment",
                "collected": "2024-04-15T10:28:08.013439",
                "published": "2024-04-14T18:18:17",
                "updated": "2024-04-15T13:22:33.893382",
                "osint_source_id": fake_source,
                "attributes": [],
            },
        ]

        yield NewsItemData.load_multiple(news_items_data_list)
