openapi: 3.0.3
info:
  title: Taranis
  contact:
    name: Benjamin Akhras
    email: benjamin.akhras@ait.ac.at
  description: |-
    The Taranis API provides endpoints for the Taranis is an OSINT gathering and analysis tool.
  license:
    name: EUPL-1.2
  version: 0.1.8
externalDocs:
  description: GitHub
  url: https://github.com/taranis-ai/taranis-ai/
servers:
  - url: /api
    description: default
  - url: https://dev.taranis.cyberrange.rocks/api
    description: dev
  - url: https://taranis.cyberrange.rocks/api
    description: main
tags:
  - name: auth
    description: session-related functionality
  - name: isalive
    description: see whether the Taranis instance is alive
  - name: users
    description: read/update the profile, get wordlists, product types and publisher presets
  - name: analyze
    description: read/update report items, their types, groups and attributes
  - name: assess
    description: read/update/delete OSINT sources and news items
  - name: assets
    description: read/update/delete asset groups, notification templates and attributes
  - name: bots
    description: read/update/delete bots-related information
  - name: collectors
    description: read/update/delete collectors (OSINT sources)
  - name: config
    description: read/update/delete everything config-related
  - name: dashboard-data
    description: get dashboard data
  - name: tagcloud
    description: get the tagcloud (grouped words)
  - name: presenters
    description: get all presenters nodes
  - name: publish
    description: read/update/delete/publish products
  - name: publishers
    description: read/update/delete publisher nodes/presets
security:
  - APIKey: []
  - UserAuth: []

paths:
  /auth/login:
    post:
      tags:
        - auth
      operationId: LoginPost
      description: authenticate with either username and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/req.auth.username_password'
      responses:
        '200':
          description: successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.JWT'
        '400':
          description: resource not found
        '401':
          description: authentication error (username + password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

    get:
      tags:
        - auth
      operationId: LoginGet
      description: get redirected to the URL requested before authentication
      parameters:
        - name: gotoUrl
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful authentication
        '302':
          description: redirection to the URL requested before authentication
        '400':
          description: invalid goto url
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /auth/refresh:
    get:
      tags:
        - auth
      description: refresh an API token
      responses:
        '200':
          description: refreshed API token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.JWT'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /auth/logout:
    get:
      tags:
        - auth
      description: invalidate API token (i.e. logout)
      parameters:
        - name: jwt
          in: query
          required: false
          schema:
            type: string
        - name: gotoUrl
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successfully logged-out
        '302':
          description: redirection to the specified URL
        '400':
          description: invalid goto url
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /isalive:
    get:
      tags:
        - isalive
      description: see whether the Taranis instance is alive
      security: []
      responses:
        '200':
          description: server is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  isalive:
                    type: boolean
                    example: True
        '404':
          $ref: "#/components/schemas/notFound"
  /users/profile:
    get:
      tags: [users]
      description: get the user's profile
      responses:
        '200':
          description: the user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
    put:
      tags: [users]
      description: update the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_profile'
      responses:
        '200':
          description: the updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_profile'
        '401':
          description: authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
  /users/my-product-types:
    get:
      tags: [users]
      description: get the user's product types
      responses:
        '200':
          description: the user's product types
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/product_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /users/my-publisher-presets:
    get:
      tags: [users]
      description: get the user's publisher presets
      responses:
        '200':
          description: the user's publisher presets
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/publisher_preset'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /analyze/report-types:
    get:
      tags: [analyze]
      description: get the types of report items
      responses:
        '200':
          description: the types of report items
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_item_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items:
    get:
      tags: [analyze]
      description: get the report items
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: completed
          in: query
          schema:
            type: string
        - name: incompleted
          in: query
          schema:
            type: string
        - name: range
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: group
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            format: int32
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: the report items
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_item.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

    post:
      tags: [analyze]
      description: add report item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/report_item.new'
      responses:
        '200':
          description: the ID of the newly created report item
          content:
            application/text:
              schema:
                type: integer
                example: 42
        '400':
          description: invalid input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /analyze/report-items/{report_item_id}:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    get:
      tags: [analyze]
      description: get a specific report item
      responses:
        '200':
          description: the report item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_item'
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    put:
      # TODO: this is a very confusing endpoint
      tags: [analyze]
      description: modify a specific report item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modify_report_item'
      responses:
        '200':
          description: the updated report item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modify_report_item.response'
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [analyze]
      description: delete a specific report item
      responses:
        '200':
          description: the report item was deleted
          content:
            application/text:
              schema:
                type: string
                example: success
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items/{report_item_id}/locks:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    get:
      tags: [analyze]
      operationId: ReportItemLocks
      description: get a report item's field locks
      responses:
        '200':
          description: the report item's field locks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_item_lock'
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items/{report_item_id}/lock:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    put:
      tags: [analyze]
      description: lock the specified field
      responses:
        '200':
          description: the locked field as a SSE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_item_lock'
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items/{report_item_id}/unlock:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    put:
      tags: [analyze]
      description: unlock the specified field
      responses:
        '200':
          description: the locked field as a SSE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/report_item_lock'
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items/{report_item_id}/file-attributes:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    post:
      deprecated: true
      tags: [analyze]
      description: attach a file to the report item
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                attribute_group_item_id:
                  type: integer
                description:
                  type: string
      responses:
        '200':
          description: the file has been attached
          content:
            application/json:
              schema:
                type: object
                properties:
                  add:
                    type: boolean
                    example: true
                  user_id:
                    type: integer
                  report_item_id:
                    type: integer
                  attribute_id:
                    type: integer
        '400':
          description: invalid request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /analyze/report-items/{report_item_id}/file-attributes/{attribute_id}:
    parameters:
      - name: report_item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
      - name: attribute_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    delete:
      deprecated: true
      tags: [analyze]
      description: remove an attachment from the report item
      responses:
        '200':
          description: the attachment has been removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  delete:
                    type: boolean
                    example: true
                  user_id:
                    type: integer
                  report_item_id:
                    type: integer
                  attribute_id:
                    type: integer
        '400':
          description: erronous input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    get:
      deprecated: true
      tags: [analyze]
      description: download a report item's specified attachment
      responses:
        '200':
          description: the report item's attachment
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: erronous input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/osint-source-groups:
    get:
      tags: [assess]
      description: get all OSINT source groups
      responses:
        '200':
          description: all OSINT source groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/osint_source_group'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/osint-source-group-list:
    get:
      tags: [assess]
      description: get all the user's OSINT source groups
      responses:
        '200':
          description: all the user's OSINT source groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/osint_source_group'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/osint-sources-list:
    get:
      tags: [assess]
      description: get manual OSINT sources
      responses:
        '200':
          description: all manual OSINT sources
          content:
            application/json:
              schema:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/osint_source'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/news-items:
    post:
      tags: [assess]
      description: add news item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news_item_data'
      responses:
        '200':
          description: the OSINT source ID of the created news item as SSEs
          content:
            application/json:
              schema:
                type: object
        '400':
          description: failed to decode the request body
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '409':
          description: news item already exists
        '422':
          description: Unprocessable Entity
        '500':
          description: Adding news item failed
  /assess/news-item-aggregates:
    get:
      tags: [assess]
      description: get stories by filters
      parameters:
        - name: search
          in: query
          description: Filter search string
          schema:
            type: string
        - name: source
          in: query
          description: Filter based on OSINT source
          schema:
            type: string
        - name: group
          in: query
          description: Filter based on OSINT source group
          schema:
            type: string
        - name: read
          in: query
          description: Filter for news_items that are read
          schema:
            type: boolean
        - name: important
          in: query
          description: Filter only important news
          schema:
            type: boolean
        - name: relevant
          in: query
          description: Filter only relevant news
          schema:
            type: boolean
        - name: in_report
          description: Filter news-items that are added to reports
          in: query
          schema:
            type: boolean
        - name: range
          description: Filter news-items with a time-range(DAY, WEEK, MONTH)
          in: query
          schema:
            type: string
        - name: sort
          description: Sort the results(DATE_DESC, DATE_ASC, RELEVANCE_DESC, RELEVANCE_ASC)
          in: query
          schema:
            type: string
        - name: offset
          in: query
          description: Offset for the results.
          schema:
            type: integer
            minimum: 0
            format: int32
        - name: limit
          description: Limit results to a specific number.
          in: query
          schema:
            type: integer
            minimum: 1
            format: int32
      responses:
        '200':
          description: the news items of the specified group
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/news_item_aggregate'
        '400':
          description: erronous input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/news-items/{item_id}:
    parameters:
      - name: item_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    get:
      tags: [assess]
      description: get the specified news item
      responses:
        '200':
          description: the news item
          content:
            application/json:
              schema:
                type: object

        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    put:
      tags: [assess]
      description: modify the specified news item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
                important:
                  type: boolean
                vote:
                  type: boolean
      responses:
        '200':
          description: the news item was modified
          content:
            application/json:
              schema:
                type: object
        '400':
          description: erronous input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [assess]
      description: delete the specified news item
      responses:
        '200':
          description: the news item was deleted
          content:
            application/json:
              schema:
                type: object
        '400':
          description: cant delete news item
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '500':
          description: aggregate in use
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: "#/components/schemas/notFound"

  /assess/news-item-aggregates/{aggregate_id}:
    parameters:
      - name: aggregate_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    get:
      tags: [assess]
      description: get the specified news item aggregate
      responses:
        '200':
          description: the news item aggregate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news_item_aggregate'
        '400':
          description: invalid aggregate_id
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    put:
      tags: [assess]
      description: modify the specified news item aggregate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
                important:
                  type: boolean
                vote:
                  type: boolean
                title:
                  type: string
                description:
                  type: string
                comments:
                  type: string
      responses:
        '200':
          description: the OSINT source IDs of the modified news aggregate
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: invalid aggregate_id

        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [assess]
      description: delete the specified news item aggregate
      responses:
        '200':
          description: the news item aggregate was deleted
          content:
            application/json:
              schema:
                type: string
                example: success
        '400':
          description: invalid aggregate_id

        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '500':
          description: aggregate in use
          content:
            application/json:
              schema:
                type: string
                example: aggregate_in_use
        '404':
          $ref: "#/components/schemas/notFound"
  /assess/news-item-aggregates/group:
    put:
      tags: [assess]
      description: Group News Items to an Aggregates
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                aggregate_ids:
                  type: array
                  items:
                    type: integer

      responses:
        '200':
          description: successfully grouped news items to an aggregate
          content:
            application/json:
              schema:
                items:
                  type: string
        '400':
          description: no newsitem_ids provided
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /assess/news-item-aggregates/ungroup:
    put:
      tags: [assess]
      description: Remove News Items from an Aggregate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        '200':
          description: successfully removed news items from an aggregate
          content:
            application/json:
              schema:
                items:
                  type: string
        '400':
          description: no newsitem_ids provided
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /assess/news-item-data/{item_data_id}/attributes/{attribute_id}/file:
    parameters:
      - name: item_data_id
        in: path
        required: true
        schema:
          type: string
      - name: attribute_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
          format: int32
    get:
      tags: [assess]
      description: download attachment
      responses:
        '200':
          description: the specified attachment
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: erronous input data
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/asset-groups:
    get:
      tags: [assets]
      description: get and add to the user's asset groups
      responses:
        '200':
          description: the user's asset group
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset_group.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [assets]
      description: add new asset to the user's asset groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset_group'
      responses:
        '200':
          description: the group has been added
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/asset-groups/{group_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags: [assets]
      description: update an asset group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset_group'
      responses:
        '200':
          description: the group has been updated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [assets]
      description: delete an asset group
      responses:
        '200':
          description: the group has been deleted
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/asset-groups/{group_id}/assets:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [assets]
      description: get all the group's assets
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: vulnerable
          in: query
          schema:
            type: string
      responses:
        '200':
          description: DESCRIPTION
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/asset.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [assets]
      description: add an assets to the group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset'
      responses:
        '200':
          description: the asset has been added
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/asset-groups/{group_id}/assets/{asset_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: string
      - name: asset_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [assets]
      description: update asset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset'
      responses:
        '200':
          description: the asset has been updated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [assets]
      description: delete the asset
      responses:
        '200':
          description: the asset has been deleted
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /assets/asset-groups/{group_id}/assets/{asset_id}/vulnerabilities/{vulnerability_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: string
      - name: asset_id
        in: path
        required: true
        schema:
          type: integer
      - name: vulnerability_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [assets]
      description: update the status of the vulnerability
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                solved:
                  type: boolean
      responses:
        '200':
          description: the status of the vulnerability has been updated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/attributes/cpe:
    get:
      tags: [assets]
      description: get CPE attribute
      responses:
        '200':
          description: the attribute ID
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /assets/attributes/cpe/enums:
    get:
      tags: [assets]
      description: get CPE attribute enums
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            format: int32
        - name: limit
          in: query
          schema:
            type: string
      responses:
        '200':
          description: the attribute enums
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/attribute_enum'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"


  /worker/osint-sources/{source_id}:
    get:
      description: Get OSINT source by ID
      parameters:
        - name: source_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the OSINT source to retrieve
      responses:
        '200':
          description: OK
        '404':
          description: Not found

  /worker/bots:
    get:
      description: Get all bots
      responses:
        '200':
          description: OK
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /worker/news-item-aggregates:
    get:
      description: Get news item aggregates
      responses:
        '200':
          description: OK
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /beat/schedule:
    get:
      description: Get all schedule entries
      responses:
        '200':
          description: OK
        '404':
          description: Not found
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

    put:
      description: Sync schedule entries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScheduleEntry'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
  /beat/schedule/{schedule_id}:
    get:
      description: Get schedule entry by ID
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the schedule entry to retrieve
      responses:
        '200':
          description: OK
        '404':
          description: Not found
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
  /beat/next-run-time:
    put:
      description: Update next run time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NextRunTime'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /bots/news-item-data:
    get:
      tags: [bots]
      description: get all news items
      parameters:
        - name: limit
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: the news items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/news_item_data'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /bots/news-item-aggregate/{news_item_aggregate_id}/tags:
    parameters:
      - name: news_item_aggregate_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags: [bots]
      description: update news item tags
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: tag has been updated
          content:
            application/json:
              schema:
                type: string
        '400':
          description: invalid tag or no tag provided
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /bots/news-item-data/{news_item_data_id}/attributes:
    parameters:
      - name: news_item_data_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags: [bots]
      description: update news item attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news_item_attribute'
      responses:
        '200':
          description: attribute has been updated
          content:
            application/json:
              schema:
                type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /bots/news-item-aggregates/group:
    put:
      tags: [bots]
      description: Group News Items to an Aggregates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer

      responses:
        '200':
          description: successfully grouped news items to an aggregate
          content:
            application/json:
              schema:
                items:
                  type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /bots/word-list/{word_list_id}/entries/{entry_name}:
    parameters:
      - name: word_list_id
        in: path
        required: true
        schema:
          type: integer
      - name: entry_name
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: [bots]
      description: delete an entry
      responses:
        '200':
          description: successfully deleted entry
          content:
            application/json:
              schema:
                type: object
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    put:
      tags: [bots]
      description: update wordlist entries
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/wordlist_entry.new'
      responses:
        '200':
          description: successfully updated entries
          content:
            application/json:
              schema:
                type: object
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /config/reload-enum-dictionaries/{dictionary_type}:
    parameters:
      - name: dictionary_type
        in: path
        required: true
        schema:
          type: string
    post:
      tags: [config]
      description: reload dictionaries
      # TODO: this should be an HTTP POST/PUT request
      responses:
        '200':
          description: successfully reloaded dictionaries
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/attributes:
    get:
      tags: [config]
      description: get attributes
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: attributes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/attribute'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add attribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attribute'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/attributes/{attribute_id}:
    parameters:
      - name: attribute_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update attribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attribute'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete attribute
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/attributes/{attribute_id}/enums:
    parameters:
      - name: attribute_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [config]
      description: get attribute enum
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add attribute enums
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                delete_existing:
                  type: boolean
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/attribute_enum'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/attributes/{attribute_id}/enums/{enum_id}:
    parameters:
      - name: attribute_id
        in: path
        required: true
        schema:
          type: integer
      - name: enum_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update attribute enum
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/attribute_enum'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete attribute enum
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/report-item-types:
    get:
      tags: [config]
      description: get report item types
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_item_type.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add report item type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/report_item_type'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/report-item-types/{type_id}:
    parameters:
      - name: type_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update report item type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/report_item_type'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete report item type
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/product-types:
    get:
      tags: [config]
      description: get all product types
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/product_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add product type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_type'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/product-types/{type_id}:
    parameters:
      - name: type_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update product type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_type'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete product type
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/permissions:
    get:
      tags: [config]
      description: get all permissions
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/permission'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/roles:
    get:
      tags: [config]
      description: get all roles
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/role'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/roles/{role_id}:
    parameters:
      - name: role_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete role
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/acls:
    get:
      tags: [config]
      description: get all ACL entries
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/acl_entry.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add ACL entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acl_entry.new'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/acls/{acl_id}:
    parameters:
      - name: acl_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update ACL entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acl_entry.new'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete ACL entry
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/organizations:
    get:
      tags: [config]
      description: get all organizations
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/organization.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organization'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/organizations/{organization_id}:
    parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organization'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete organization
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"

  /config/users:
    get:
      tags: [config]
      description: get all users
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/user.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user.new'
      responses:
        '200':
          description: success
        '400':
          description: could not create user in external auth system
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user.new'
      responses:
        '200':
          description: success
        '400':
          description: could not update user
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete user
      responses:
        '200':
          description: success
        '400':
          description: could not delete user
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/workers:
    get:
      tags: [config]
      operationId: Workers
      description: get all workers connected for CELERY (via RabbitMQ)
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '500':
          description: could not connect to RabbitMQ
  /config/worker-types:
    get:
      tags: [config]
      operationId: WorkerTypesGet
      description: get all worker types
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/worker_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
    post:
      tags: [config]
      operationId: WorkerTypesPut
      description: create new worker type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/worker_type'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/export-word-lists:
    parameters:
    - name: ids
      in: query
      schema:
        type: array
        items:
          type: string
    get:
      tags: [config]
      description: export Wordlists
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordlist'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/import-word-lists:
    post:
      tags: [config]
      description: import Wordlists
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: json
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordlist'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '405':
          description: method not allowed
          content:
            'application/json': { }
            'application/xml': { }

  /config/word-lists/{word_list_id}/gather:
    parameters:
      - name: word_list_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      operationId: WordListGather
      description: gather wordlist entries
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '500':
          description: could not connect to RabbitMQ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /config/workers/queue-status:
    get:
      tags: [config]
      operationId: WorkersQueueStatus
      description: get queue status for all workers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  url:
                    type: string
        '500':
          description: could not connect to RabbitMQ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /config/workers/schedule:
    get:
      tags: [config]
      description: get all scheduled tasks
      operationId: QueueSchedule
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/scheduled_task'

  /config/parameters:
    get:
      tags: [config]
      description: get all parameters
      operationId: Parameters
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/parameter'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/presenters:
    get:
      tags: [config]
      description: get all presenters
      operationId: Presenters
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/worker_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/publishers:
    get:
      tags: [config]
      description: get all publishers
      operationId: Publishers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/worker_type'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
  /config/bots:
    get:
      tags: [config]
      description: get all bots
      operationId: BotsGet
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/bot'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
    post:
      tags: [config]
      description: add bot
      operationId: BotsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bot'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  message:
                    type: string
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/bots/{bot_id}:
    parameters:
      - name: bot_id
        in: path
        required: true
        schema:
          type: integer
    delete:
      tags: [config]
      description: delete bot
      operationId: BotsDelete
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
    put:
      tags: [config]
      description: update bot
      operationId: BotsPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bot'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/bots/{bot_id}/execute:
    parameters:
      - name: bot_id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags: [config]
      description: execute bot
      operationId: BotExecute
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/word-lists:
    get:
      tags: [config]
      description: get all wordlists
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/wordlist'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add wordlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wordlist'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/word-lists/{word_list_id}:
    parameters:
      - name: word_list_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update wordlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wordlist'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete wordlist
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/osint-sources:
    get:
      tags: [config]
      description: get all OSINT sources
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/osint_source'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add OSINT source
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/osint_source'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/osint-sources/{osint_source_id}:
    parameters:
      - name: osint_source_id
        in: path
        required: true
        schema:
          type: string
    put:
      tags: [config]
      description: update OSINT source
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/osint_source'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete OSINT source
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /osint-sources/{osint_source_id}/collect:
    parameters:
      - name: osint_source_id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: [config]
      description: collect OSINT source
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                selection:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
  /osint-sources/collect:
    post:
      tags: [config]
      description: collect all OSINT sources
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                selection:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'

  /config/export-osint-sources:
    parameters:
    - name: ids
      in: query
      schema:
        type: array
        items:
          type: string
    get:
      tags: [config]
      description: export OSINT sources
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/osint_source.export'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/import-osint-sources:
    post:
      tags: [config]
      description: import OSINT sources
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: json
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/osint_source'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '405':
          description: method not allowed
          content:
            'application/json': { }
            'application/xml': { }
  /config/osint-source-groups:
    get:
      tags: [config]
      description: get all OSINT source groups
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/osint_source_group'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add OSINT source group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/osint_source_group'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/osint-source-groups/{group_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update OSINT source group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/osint_source_group'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete OSINT source group
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/publisher-preset:
    get:
      tags: [config]
      description: get all publisher preset
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/publisher_preset.presentation'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [config]
      description: add publisher preset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisher_preset'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /config/publisher-preset/{preset_id}:
    parameters:
      - name: preset_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags: [config]
      description: update publisher preset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publisher_preset'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [config]
      description: delete publisher preset
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /dashboard/trending-clusters:
    get:
      tags: [trending-clusters]
      description: get trending clusters
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusters:
                    type: integer
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
  /dashboard:
    get:
      tags: [dashboard-data]
      description: get dashboard data
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_news_items:
                    type: integer
                  total_products:
                    type: integer
                  report_items_completed:
                    type: integer
                  report_items_in_progress:
                    type: integer
                  total_database_items:
                    type: integer
                  latest_collected:
                    type: string
                    format: date-time
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
        '500':
          description: Internal server error
  /publish/products:
    get:
      tags: [publish]
      description: get products
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: range
          in: query
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/product'
        '400':
          description: resource not found
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    post:
      tags: [publish]
      description: add product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
                example: ID of newly created product
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /publish/products/{product_id}:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [publish]
      description: get product details
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    put:
      tags: [publish]
      description: update product details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
    delete:
      tags: [publish]
      description: delete product
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /publish/products/{product_id}/overview:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [publish]
      description: download an overview of the specific product
      responses:
        '200':
          description: the product data as a download
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
  /publish/products/{product_id}/publishers/{publisher_id}:
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
      - name: publisher_id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: [publish]
      description: generate a specific product at a specific publisher
      responses:
        '200':
          description: success
        '401':
          description: authorization error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resp.auth.error'
        '404':
          $ref: "#/components/schemas/notFound"
components:
  schemas:
    #requests

    req.auth.username_password:
      type: object
      properties:
        username:
          type: string
          example: 936@xkcd.com
        password:
          type: string
          example: correct horse battery staple
      required:
        - username
        - password

    #responses

    notFound:
      description: "Not found response"

    resp.auth.JWT:
      type: object
      properties:
        access_token:
          type: string
    resp.auth.error:
      type: object
      properties:
        error:
          type: string

    #general


    scheduled_task:
      type: object
      properties:
        next_run_time:
          type: string
          format: date-time
        last_run_at:
          type: string
          format: date-time
        total_run_count:
          type: integer
        task:
          type: string
        args:
          type: array
          items:
            type: string
        schedule:
          type: string

    presentation:
      type: object
      properties:
        title:
          type: string
        subtitle:
          type: string
        tag:
          type: string

    user.new:
      allOf:
        - $ref: '#/components/schemas/user.base'
        - type: object
          properties:
            roles:
              type: array
              items:
                type: integer
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/permission.id'
            organizations:
              type: array
              items:
                $ref: '#/components/schemas/organization.id'

    user.base:
      type: object
      properties:
        id:
          type: integer
          example: 42
        username:
          type: string
          example: alice@example.com
        name:
          type: string
          example: Alice
        password:
          type: string
    user:
      allOf:
        - $ref: '#/components/schemas/user.base'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/role'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/permission'
            organisations:
              type: array
              items:
                $ref: '#/components/schemas/organization'
    user.presentation:
      allOf:
        - $ref: '#/components/schemas/user'
        - $ref: '#/components/schemas/presentation'
    user.id:
      type: object
      properties:
        id:
          type: integer
    hotkey:
      type: object
      properties:
        key_code:
          type: integer
        key:
          type: string
        alias:
          type: string
    user_profile:
      type: object
      properties:
        dark_theme:
          type: boolean
          example: False
        compact_view:
          type: boolean
          example: False
        show_charts:
          type: boolean
          example: True
        split_view:
          type: boolean
          example: False
        hotkeys:
          type: array
          items:
            $ref: '#/components/schemas/hotkey'

    permission:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    permission.id:
      type: object
      properties:
        id:
          type: string
    role:
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string

    organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/address'
    organization.presentation:
      allOf:
        - $ref: '#/components/schemas/organization'
        - $ref: '#/components/schemas/presentation'
    organization.id:
      type: object
      properties:
        id:
          type: integer

    address.new:
      allOf:
        - $ref: '#/components/schemas/address'

    address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        zip:
          type: string
        country:
          type: string

    wordlist_entry.new:
      allOf:
        - $ref: '#/components/schemas/wordlist_entry'
    wordlist_entry:
      type: object
      properties:
        value:
          type: string
        description:
          type: string
    wordlist:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        usage:
          type: integer
        link:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/wordlist_entry'

    product_type:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        presenter_id:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameter_value'

    publisher_preset.base:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameter_value'
    publisher_preset:
      allOf:
        - $ref: '#/components/schemas/publisher_preset.base'
        - type: object
          properties:
            description:
              type: string
            use_for_notifications:
              type: boolean
            publisher_id:
              type: string
    publisher_preset.presentation:
      allOf:
        - $ref: '#/components/schemas/publisher_preset'
        - $ref: '#/components/schemas/presentation'

    attribute_group_item:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        index:
          type: integer
        multiple:
          type: boolean
        attribute_group_id:
          type: integer
        attribute_id:
          type: integer
        attribute:
          $ref: '#/components/schemas/attribute'
    attribute_group:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        index:
          type: integer
        report_item_type_id:
          type: integer
        attribute_group_items:
          type: array
          items:
            $ref: '#/components/schemas/attribute_group_item'
    report_item_type:
      allOf:
        - type: object
          properties:
            id:
              type: integer
            title:
              type: string
            description:
              type: string
            attribute_groups:
              type: array
              items:
                $ref: '#/components/schemas/attribute_group'
    report_item_type.presentation:
      allOf:
        - $ref: '#/components/schemas/report_item_type'
        - $ref: '#/components/schemas/presentation'
    report_item_type.id:
      type: object
      properties:
        id:
          type: integer

    report_item_attribute.new:
      allOf:
        - $ref: '#/components/schemas/report_item_attribute.base'
    report_item.new:
      allOf:
        - $ref: '#/components/schemas/report_item.base'
        - type: object
          properties:
            news_item_aggregates:
              type: array
              items:
                type: integer
            attributes:
              type: array
              items:
                $ref: '#/components/schemas/report_item_attribute'

    report_item_attribute.base:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
        binary_mime_type:
          type: string
        binary_description:
          type: string
        attribute_group_item_id:
          type: integer
    report_item_attribute:
      allOf:
        - $ref: '#/components/schemas/report_item_attribute.base'
        - type: object
          properties:
            created:
              type: string
              format: date-time
            last_updated:
              type: string
              format: date-time
            version:
              type: integer
            current:
              type: boolean
            user:
              $ref: '#/components/schemas/user.base'
    report_item.base:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
        title:
          type: string
        created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        completed:
          type: boolean
        report_item_type_id:
          type: integer
    report_item:
      allOf:
        - $ref: '#/components/schemas/report_item.base'
        - type: object
          properties:
            news_item_aggregates:
              type: array
              items:
                $ref: '#/components/schemas/news_item_aggregate'
            attributes:
              type: array
              items:
                $ref: '#/components/schemas/report_item_attribute'
    report_item.presentation:
      allOf:
        - $ref: '#/components/schemas/report_item.base'
        - $ref: '#/components/schemas/acl_entry_status'
        - $ref: '#/components/schemas/presentation'
    report_item.id:
      type: object
      properties:
        id:
          type: integer

    parameter_value:
      type: object
      properties:
        value:
          type: string
        parameter:
          $ref: '#/components/schemas/parameter'
    parameter_value.export:
      type: object
      properties:
        value:
          type: string
        parameter:
          $ref: '#/components/schemas/parameter.export'

    parameter_type:
      type: string
      enum: [STRING, NUMBER, BOOLEAN]

    parameter:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/parameter_type'
    parameter.export:
      type: object
      properties:
        key:
          type: string

    attribute_type:
      type: string
      enum: [STRING, NUMBER, BOOLEAN, RADIO, ENUM, TEXT, RICH_TEXT, DATE, TIME, DATE_TIME, LINK, ATTACHMENT, TLP, CPE, CVE, CVSS, STORY]
    attribute_enum:
      type: object
      properties:
        id:
          type: integer
        index:
          type: integer
        value:
          type: string
        description:
          type: string
    attribute.base:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/attribute_type'
        default_value:
          type: string
        tag:
          type: string
    attribute:
      allOf:
        - $ref: '#/components/schemas/attribute.base'
        - type: object
          properties:
            attribute_enums:
              type: array
              items:
                $ref: '#/components/schemas/attribute_enum'

    news_item_attribute:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        key:
          type: string
        value:
          type: string
        binary_mime_type:
          type: string
        binary_value:
          type: string
          format: base64
      required:
        - key
        - value
    news_item_data:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        hash:
          type: string
        title:
          type: string
        review:
          type: string
        source:
          type: string
        link:
          type: string
        published:
          type: string
          format: date-time
        author:
          type: string
        collected:
          type: string
          format: date-time
        osint_source_id:
          type: string
        content:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/news_item_attribute'
      required:
        - title
        - review
        - source
        - content
    news_item.base:
      type: object
      properties:
        id:
          type: integer
        likes:
          type: integer
        dislikes:
          type: integer
        read:
          type: boolean
        important:
          type: boolean
        me_like:
          type: boolean
        me_dislike:
          type: boolean
        news_items_data:
          $ref: '#/components/schemas/news_item_data'
    news_item_tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        tag_type:
          type: string
        n_i_d:
          type: array
          items:
            $ref: '#/components/schemas/news_item_data'
    news_item.presentation:
      allOf:
        - $ref: '#/components/schemas/news_item.base'
        - $ref: '#/components/schemas/acl_entry_status'
    news_item:
      allOf:
        - $ref: '#/components/schemas/news_item.base'
        - type: object
          properties:
            news_item_data:
              $ref: '#/components/schemas/news_item_data'
    news_item_aggregate:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time
        comments:
          type: string
        likes:
          type: integer
        dislikes:
          type: integer
        read:
          type: boolean
        important:
          type: boolean
        me_like:
          type: boolean
        me_dislike:
          type: boolean
        in_reports_count:
          type: integer
        tags:
          type: array
          items:
            type: string
        news_items:
          type: array
          items:
            $ref: '#/components/schemas/news_item.presentation'
    news_item_aggregate.id:
      type: object
      properties:
        id:
          type: integer

    modify_report_item:
      type: object
      properties:
        title:
          type: string
        completed:
          type: boolean
    modify_report_item.response:
      allOf:
        - $ref: '#/components/schemas/modify_report_item'
        - type: object
          properties:
            user_id:
              type: integer
            report_item_id:
              type: integer
    ScheduleEntry:
      type: object
      properties:
        id:
          type: string
        bot_id:
          type: string
        source_id:
          type: string
        frequency:
          type: string
        next_run_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - bot_id
        - source_id
        - frequency
        - next_run_time
    NextRunTime:
      type: object
      properties:
        bot_id:
          type: string
        source_id:
          type: string
        next_run_time:
          type: string
          format: date-time
      required:
        - bot_id
        - source_id
        - next_run_time

    osint_source_update_status:
      type: object
      properties:
        last_collected:
          type: string
          format: date-time
        last_attempted:
          type: string
          format: date-time
        last_error_message:
          type: string
        last_data:
          type: string
    osint_source:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameter_value'

    osint_source_group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        default:
          type: boolean
        osint_sources:
          type: array
          items:
            type: string
        word_lists:
          type: array
          items:
            type: integer

    osint_source_group.export:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        osint_sources:
          type: array
          items:
            type: string
    osint_source.export:
      type: object
      properties:
        version:
          type: integer
        sources:
          type: array
          items:
            $ref: '#/components/schemas/osint_source.export'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/osint_source_group.export'

    asset:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        serial:
          type: string
        description:
          type: string
        asset_group_id:
          type: string
        asset_cpes:
          type: array
          items:
            type: string
    report_item_vulnerability:
      allOf:
        - $ref: '#/components/schemas/report_item.base'
        - $ref: '#/components/schemas/presentation'
        - type: object
          properties:
            report_item_type:
              $ref: '#/components/schemas/report_item_type'
            attributes:
              type: array
              items:
                $ref: '#/components/schemas/report_item_attribute'
    asset_vulnerability:
      type: object
      properties:
        report_item:
          $ref: '#/components/schemas/report_item_vulnerability'
        solved:
          type: boolean
    asset.presentation:
      allOf:
        - $ref: '#/components/schemas/asset'
        - $ref: '#/components/schemas/presentation'
        - type: object
          properties:
            vulnerabilities_count:
              type: integer
            vulnerabilities:
              type: array
              items:
                $ref: '#/components/schemas/asset_vulnerability'
    asset_group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    asset_group.presentation:
      allOf:
        - $ref: '#/components/schemas/asset_group'
        - $ref: '#/components/schemas/presentation'
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/user.base'

    modify_group_action:
      type: object
      properties:
        action:
          type: string
          enum: [GROUP, UNGROUP, LIKE, DISLIKE, IMPORTANT, READ]
        items:
          type: object
          properties:
            type:
              type: string
              enum: [AGGREGATE]
            id:
              type: string

    bot:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        index:
          type: integer
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameter_value'

    worker_type:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        worker_type:
          type: string
        category:
          type: string

    acl_entry.new:
      allOf:
        - $ref: '#/components/schemas/acl_entry'
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/user.id'
            roles:
              type: array
              items:
                type: integer

    item_type:
      type: string
      enum: [COLLECTOR, OSINT_SOURCE, OSINT_SOURCE_GROUP, WORD_LIST, REPORT_ITEM, REPORT_ITEM_TYPE, PRODUCT_TYPE, DELEGATION]
    acl_entry_status:
      type: object
      properties:
        see:
          type: boolean
        access:
          type: boolean
        modify:
          type: boolean
    acl_entry:
      allOf:
        - $ref: '#/components/schemas/acl_entry_status'
        - type: object
          properties:
            id:
              type: integer
            name:
              type: string
            description:
              type: string
            item_type:
              $ref: '#/components/schemas/item_type'
            item_id:
              type: string
            everyone:
              type: boolean
    acl_entry.presentation:
      allOf:
        - $ref: '#/components/schemas/acl_entry'
        - $ref: '#/components/schemas/presentation'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/role'
            users:
              type: array
              items:
                $ref: '#/components/schemas/user.base'

    product.base:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        product_type_id:
          type: integer
    product:
      allOf:
        - $ref: '#/components/schemas/product.base'
        - type: object
          properties:
            report_items:
              type: array
              items:
                $ref: '#/components/schemas/report_item.presentation'

    report_item_lock:
      type: object
      properties:
        report_item_id:
          type: integer
        locked:
          type: boolean
        lock_time:
          type: string
          format: date-time

  securitySchemes:
    APIKey:
      type: http
      scheme: bearer
      bearerFormat: APIKEY
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

